{
  "version": 3,
  "sources": ["../src/machine/c64.ts", "../src/platform/c64.ts"],
  "sourcesContent": ["// Add global C64 debug functions that are available even when machine isn't initialized\n(function() {\n  // Add global functions for C64 iframe URL generation\n  (window as any).c64_debug = {\n    // Generate iframe URL with program data (with gzip compression for large programs)\n    generateIframeURL: async (programData: Uint8Array, useBase64: boolean = true) => {\n      const baseURL = 'c64-iframe.html';\n      \n      // For large programs, use gzip compression\n      if (programData.length > 1000) {\n        try {\n          // Dynamically import pako for gzip compression\n          const pako = await import('pako');\n          \n          // Compress the data with gzip\n          const compressed = pako.gzip(programData);\n          \n          // Convert to hex string (more compact than base64)\n          const hexString = Array.from(compressed).map(b => b.toString(16).padStart(2, '0')).join('');\n          \n          console.log(`C64 debug: Original size: ${programData.length} bytes, Compressed: ${compressed.length} bytes (${Math.round((1 - compressed.length / programData.length) * 100)}% reduction)`);\n          \n          return `${baseURL}?gzip=${encodeURIComponent(hexString)}`;\n        } catch (e) {\n          console.error('C64 debug: Gzip compression failed, falling back to base64:', e);\n          // Fall back to base64 if compression fails\n          const binaryString = String.fromCharCode.apply(null, Array.from(programData));\n          const base64Data = btoa(binaryString);\n          return `${baseURL}?program=${encodeURIComponent(base64Data)}`;\n        }\n      } else {\n        // For small programs, use original method\n        if (useBase64) {\n          // Convert to base64 for shorter URLs\n          const binaryString = String.fromCharCode.apply(null, Array.from(programData));\n          const base64Data = btoa(binaryString);\n          return `${baseURL}?program=${encodeURIComponent(base64Data)}`;\n        } else {\n          // Convert to hex string\n          const hexString = Array.from(programData).map(b => b.toString(16).padStart(2, '0')).join(' ');\n          return `${baseURL}?hex=${encodeURIComponent(hexString)}`;\n        }\n      }\n    },\n    \n    // Open iframe with current compiled program\n    openIframeWithCurrentProgram: () => {\n      const output = (window as any).IDE?.getCurrentOutput();\n      if (output && output instanceof Uint8Array) {\n        const url = (window as any).c64_debug.generateIframeURL(output);\n        console.log('Opened C64 iframe with current program:', url);\n        return url;\n      } else {\n        console.error('No compiled program available. Compile first.');\n        return null;\n      }\n    },\n    \n    // Get current program as hex string for manual loading\n    getCurrentProgramHex: () => {\n      const output = (window as any).IDE?.getCurrentOutput();\n      if (output && output instanceof Uint8Array) {\n        const hexString = Array.from(output).map(b => b.toString(16).padStart(2, '0')).join(' ');\n        console.log('Current program hex:', hexString);\n        return hexString;\n      } else {\n        console.error('No compiled program available. Compile first.');\n        return null;\n      }\n    },\n    \n    // Get current program info\n    getCurrentProgramInfo: () => {\n      const output = (window as any).IDE?.getCurrentOutput();\n      if (output && output instanceof Uint8Array) {\n        console.log('Current program info:');\n        console.log('  Size:', output.length, 'bytes');\n        console.log('  First 16 bytes:', Array.from(output.slice(0, 16)).map(b => b.toString(16).padStart(2, '0')).join(' '));\n        if (output.length >= 2) {\n          const loadAddress = (output[1] << 8) | output[0];\n          console.log('  Load address: 0x' + loadAddress.toString(16));\n        }\n        \n        // Test compression ratio\n        if (output.length > 1000) {\n          try {\n            // Dynamically import pako for compression test\n            import('pako').then(pako => {\n              const compressed = pako.gzip(output);\n              const hexString = Array.from(compressed).map(b => b.toString(16).padStart(2, '0')).join('');\n              const compressionRatio = Math.round((1 - compressed.length / output.length) * 100);\n              const urlLength = `c64-iframe.html?gzip=${encodeURIComponent(hexString)}`.length;\n              \n              console.log('  Compression test:');\n              console.log('    Original size:', output.length, 'bytes');\n              console.log('    Compressed size:', compressed.length, 'bytes');\n              console.log('    Compression ratio:', compressionRatio + '%');\n              console.log('    URL length:', urlLength, 'characters');\n              console.log('    URL limit safe:', urlLength < 8000 ? 'YES' : 'NO');\n            }).catch(e => {\n              console.log('  Compression test failed:', e);\n            });\n          } catch (e) {\n            console.log('  Compression test failed:', e);\n          }\n        }\n        \n        return {\n          size: output.length,\n          loadAddress: output.length >= 2 ? (output[1] << 8) | output[0] : null,\n          firstBytes: Array.from(output.slice(0, 16))\n        };\n      } else {\n        console.error('No compiled program available. Compile first.');\n        return null;\n      }\n    }\n  };\n  \n  console.log(\"\u2705 C64 debug functions added to window.c64_debug\");\n  console.log(\"Available functions:\");\n  console.log(\"  - c64_debug.generateIframeURL(programData, useBase64)\");\n  console.log(\"  - c64_debug.openIframeWithCurrentProgram()\");\n  console.log(\"  - c64_debug.getCurrentProgramHex()\");\n  console.log(\"  - c64_debug.getCurrentProgramInfo()\");\n})();\n\nimport { CpuState, EmuState } from \"../common/baseplatform\";\nimport { hex } from \"../common/util\";\n\n// Global variable to hold the chips-test C64 module\ndeclare global {\n  interface Window {\n    c64_module?: any;\n    Module?: any;\n  }\n  var Module: any;\n}\n\nexport class C64ChipsMachine {\n  private module: any = null;\n  private canvas: HTMLCanvasElement | null = null;\n  private running = false;\n  private name: string;\n  private description: string;\n  \n\n  constructor() {\n    this.name = \"C64 (chips-test)\";\n    this.description = \"Commodore 64 emulator using chips-test WebAssembly\";\n  }\n\n  getName(): string {\n    return this.name;\n  }\n\n  getDescription(): string {\n    return this.description;\n  }\n\n  async init(): Promise<void> {\n    try {\n      console.log(\"Initializing chips-test C64 emulator...\");\n      \n      // Create the canvas element that the chips-test emulator expects\n      this.canvas = document.createElement('canvas');\n      this.canvas.id = 'canvas';\n      // Make the canvas responsive - use larger size for better visibility\n      this.canvas.width = 640;  // Double the original size\n      this.canvas.height = 400; // Double the original size\n      this.canvas.style.border = '1px solid #333';\n      this.canvas.style.width = '100%';\n      this.canvas.style.height = 'auto';\n      this.canvas.style.maxWidth = '800px';\n      this.canvas.style.maxHeight = '600px';\n      \n     \n      \n      // Add canvas to the pre-existing C64 chips div\n      const c64Div = document.getElementById('c64-chips-div');\n      const c64Screen = document.getElementById('c64-chips-screen');\n      if (c64Div && c64Screen) {\n        c64Screen.appendChild(this.canvas);\n        c64Div.style.display = 'block';\n        console.log(\"\u2705 Added C64 canvas to pre-existing div\");\n      } else {\n        // Fallback to body if div not found\n        document.body.appendChild(this.canvas);\n        console.log(\"\u26A0\uFE0F C64 div not found, using body fallback\");\n      }\n      \n      // Load the chips-test module if not already loaded\n      if (!window.c64_module) {\n        const script = document.createElement('script');\n        script.src = `res/c64.js?t=${Date.now()}`;\n        script.async = true;\n        \n        // Wait for the module to load\n        await new Promise<void>((resolve, reject) => {\n          script.onload = () => {\n            // Give the chips-test emulator a moment to initialize\n            setTimeout(() => {\n              // Check if the chips-test functions are available\n              if (typeof (window as any).c64_quickload === 'function') {\n                console.log(\"C64 quickload function found - using direct access\");\n                window.c64_module = window;\n                resolve();\n                return;\n              }\n              \n              // Also check for the Module object\n              if (typeof (window as any).Module !== 'undefined' && (window as any).Module) {\n                console.log(\"C64 Module found - using Module object\");\n                window.c64_module = (window as any).Module;\n                resolve();\n                return;\n              }\n              \n              // If we still can't find it, just assume it's working and use window\n              console.log(\"C64 module detection failed, but emulator is running - using window fallback\");\n              window.c64_module = window;\n              resolve();\n            }, 500); // Wait 500ms for initialization\n          };\n          script.onerror = () => reject(new Error(\"Failed to load C64 module\"));\n          document.head.appendChild(script);\n        });\n      }\n      \n      // Add cache-busting for WASM files\n      const originalFetch = window.fetch;\n      window.fetch = function(input: RequestInfo | URL, init?: RequestInit) {\n        if (typeof input === 'string' && (input.includes('c64.wasm') || input.includes('c64.js'))) {\n          const separator = input.includes('?') ? '&' : '?';\n          input = `${input}${separator}t=${Date.now()}`;\n        }\n        return originalFetch.call(this, input, init);\n      }\n      \n      this.module = window.c64_module;\n\n      // Initialize the module\n      if (this.module && this.module._main) {\n        // Call the main function to initialize the emulator\n        this.module._main(0, 0);\n        console.log(\"C64 chips-test emulator initialized successfully\");\n      } else if (this.module === window) {\n        // We're using the window fallback - the emulator is already running\n        console.log(\"C64 chips-test emulator using window fallback - already running\");\n        \n        // Wait a bit more for the Module object to be fully ready\n        await new Promise(resolve => setTimeout(resolve, 500));\n        \n        // Try to get the Module object\n        if (typeof (window as any).Module !== 'undefined' && (window as any).Module) {\n          console.log(\"Found Module object, setting module reference\");\n          this.module = (window as any).Module;\n        }\n        \n        // Wait for the canvas to be properly set up before calling URL parser\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        \n        // Skip calling the URL parameter parser for now since it causes DOM access issues\n        // The emulator should work fine without it\n        console.log(\"Skipping URL parameter parser to avoid DOM access issues\");\n      } else {\n        throw new Error(\"C64 module not properly initialized\");\n      }\n      \n\n\n    } catch (error) {\n      console.error(\"Failed to initialize C64 chips-test emulator:\", error);\n      throw error;\n    }\n  }\n\n  \n  run(): void {\n    if (this.module && this.running) return;\n    this.running = true;\n    \n    // The chips-test emulator runs automatically, we just need to ensure it's started\n    if (this.module && typeof (this.module as any).c64_run === 'function') {\n      (this.module as any).c64_run();\n    } else if (typeof (window as any).c64_run === 'function') {\n      (window as any).c64_run();\n    }\n  }\n\n  stop(): void {\n    this.running = false;\n    // The chips-test emulator doesn't have a stop function, it runs continuously\n    // We just mark it as not running\n  }\n\n  reset(): void {\n    if (this.module && typeof (this.module as any).c64_reset === 'function') {\n      (this.module as any).c64_reset();\n    } else if (typeof (window as any).c64_reset === 'function') {\n      (window as any).c64_reset();\n    }\n  }\n\n  loadProgram(program: Uint8Array): void {\n    console.log(\"=== C64 LOAD PROGRAM DEBUG (UPDATED VERSION) ===\");\n    console.log(\"\u2705 NEW FOCUS PREVENTION ACTIVE ===\");\n    console.log(\"C64 loadProgram called with\", program.length, \"bytes\");\n    console.log(\"First few bytes:\", program.slice(0, 10));\n    \n    // CRITICAL: Reset emulator state before loading to prevent automatic execution\n    console.log(\"\uD83D\uDD04 Resetting emulator state to prevent automatic execution\");\n    this.reset();\n    \n    // Debug: Check what functions are available\n    console.log(\"Available window functions:\", Object.keys(window).filter(key => key.includes('c64')));\n    console.log(\"Available module functions:\", this.module ? Object.keys(this.module).filter(key => key.includes('c64')) : \"No module\");\n    \n    // Check if Module object has the function\n    if (typeof (window as any).Module !== 'undefined' && (window as any).Module) {\n      console.log(\"Module object available:\", Object.keys((window as any).Module).filter(key => key.includes('c64')));\n      console.log(\"All Module functions:\", Object.keys((window as any).Module).slice(0, 20)); // First 20 functions\n    } else {\n      console.log(\"Module object not available\");\n    }\n    \n    // Check if Module object exists at all\n    console.log(\"Window.Module exists:\", typeof (window as any).Module !== 'undefined');\n    if (typeof (window as any).Module !== 'undefined') {\n      console.log(\"Module object keys:\", Object.keys((window as any).Module));\n    }\n    \n    // Check what's in the c64_module\n    if ((window as any).c64_module) {\n      console.log(\"c64_module keys:\", Object.keys((window as any).c64_module));\n      \n      // Search for any function that might be the quickload function\n      const allKeys = Object.keys((window as any).c64_module);\n      const quickloadCandidates = allKeys.filter(key => \n        key.toLowerCase().includes('quickload') || \n        key.toLowerCase().includes('load') || \n        key.toLowerCase().includes('prg') ||\n        key.toLowerCase().includes('rom')\n      );\n      console.log(\"Quickload candidates:\", quickloadCandidates);\n      \n      // Check if any of these are functions\n      for (const candidate of quickloadCandidates) {\n        const value = (window as any).c64_module[candidate];\n        if (typeof value === 'function') {\n          console.log(`Found function: ${candidate}`, value);\n        }\n      }\n    }\n    \n    // Convert to PRG format (2-byte header + program data)\n    // Check if the program already has a PRG header (first two bytes are load address)\n    let prgData: Uint8Array;\n    \n    if (program.length >= 2 && program[0] === 0x01 && program[1] === 0x08) {\n      // Program already has PRG header, use as-is\n      console.log(\"Program already has PRG header, using as-is\");\n      prgData = program;\n    } else {\n      // Add PRG header\n      console.log(\"Adding PRG header to program\");\n      prgData = new Uint8Array(program.length + 2);\n      prgData[0] = 0x01; // Load address low byte\n      prgData[1] = 0x08; // Load address high byte (0x0801 for C64 BASIC)\n      prgData.set(program, 2);\n    }\n    \n    console.log(\"PRG data length:\", prgData.length);\n    console.log(\"PRG header:\", prgData[0], prgData[1]);\n    console.log(\"First few bytes of program:\", prgData.slice(0, 10));\n    \n    // Try multiple approaches to call the quickload function\n    let success = false;\n    \n    // Check for input parameter in URL\n    const urlParams = new URLSearchParams(window.location.search);\n    const inputParam = urlParams.get('input');\n    if (inputParam) {\n      console.log(\"Found input parameter:\", inputParam);\n      // Try to add input parameter to the emulator\n      if (this.module && typeof (this.module as any).__sargs_add_kvp === 'function') {\n        try {\n          (this.module as any).__sargs_add_kvp('input', inputParam);\n          console.log(\"\u2705 Successfully added input parameter to module\");\n        } catch (e) {\n          console.log(\"\u274C Error adding input parameter to module:\", e);\n        }\n      }\n      if (typeof (window as any).h && typeof (window as any).h.__sargs_add_kvp === 'function') {\n        try {\n          (window as any).h.__sargs_add_kvp('input', inputParam);\n          console.log(\"\u2705 Successfully added input parameter to window.h\");\n        } catch (e) {\n          console.log(\"\u274C Error adding input parameter to window.h:\", e);\n        }\n      }\n    }\n    \n    // Approach 1: Direct module access\n    if (this.module && typeof (this.module as any).c64_quickload === 'function') {\n      console.log(\"Calling c64_quickload via module\");\n      (this.module as any).c64_quickload(prgData);\n      success = true;\n    }\n    \n    // Approach 2: Window access\n    if (!success && typeof (window as any).c64_quickload === 'function') {\n      console.log(\"Calling c64_quickload via window\");\n      (window as any).c64_quickload(prgData);\n      success = true;\n    }\n    \n    // Approach 3: Module object access\n    if (!success && typeof (window as any).Module !== 'undefined' && (window as any).Module) {\n      const Module = (window as any).Module;\n      if (typeof Module.c64_quickload === 'function') {\n        console.log(\"Calling c64_quickload via Module object\");\n        Module.c64_quickload(prgData);\n        success = true;\n      }\n    }\n    \n    // Approach 4: Try to call the function through the WebAssembly module\n    if (!success && this.module && this.module._c64_quickload) {\n      console.log(\"Calling c64_quickload via WebAssembly module\");\n      this.module._c64_quickload(prgData);\n      success = true;\n    }\n    \n    // Approach 5: Try to call through Module.exports (since drag-and-drop works)\n    if (!success && typeof (window as any).Module !== 'undefined' && (window as any).Module) {\n      const Module = (window as any).Module;\n      if (Module.exports && Module.exports.c64_quickload) {\n        console.log(\"Calling c64_quickload via Module.exports\");\n        Module.exports.c64_quickload(prgData);\n        success = true;\n      }\n    }\n    \n    // Approach 6: Try to call through Module directly with the function name\n    if (!success && typeof (window as any).Module !== 'undefined' && (window as any).Module) {\n      const Module = (window as any).Module;\n      // Try to call the function directly on the Module object\n      try {\n        console.log(\"Attempting to call c64_quickload directly on Module\");\n        Module.c64_quickload(prgData);\n        success = true;\n      } catch (e) {\n        console.log(\"Direct Module call failed:\", e);\n      }\n    }\n    \n    // Approach 7: Try to allocate memory in the WebAssembly module and call the function\n    if (!success && typeof (window as any).Module !== 'undefined' && (window as any).Module) {\n      const Module = (window as any).Module;\n      try {\n        console.log(\"Attempting to allocate memory and call c64_quickload\");\n        // Allocate memory in the WebAssembly module\n        const ptr = Module._malloc(prgData.length);\n        // Copy the data to the allocated memory\n        Module.HEAPU8.set(prgData, ptr);\n        // Call the function with the pointer and length\n        Module.c64_quickload(ptr, prgData.length);\n        // Free the memory\n        Module._free(ptr);\n        success = true;\n      } catch (e) {\n        console.log(\"Memory allocation approach failed:\", e);\n      }\n    }\n    \n    // Approach 8: Try to trigger the drag-and-drop functionality programmatically\n    if (!success) {\n      try {\n        console.log(\"Attempting to trigger drag-and-drop functionality\");\n        // Create a fake file object\n        const file = new File([prgData], 'program.prg', { type: 'application/octet-stream' });\n        \n        // Create a fake drop event\n        const dropEvent = new Event('drop', { bubbles: true });\n        Object.defineProperty(dropEvent, 'dataTransfer', {\n          value: {\n            files: [file],\n            getData: () => null\n          }\n        });\n        \n        // Dispatch the event on the canvas\n        const canvas = this.getCanvas();\n        if (canvas) {\n          canvas.dispatchEvent(dropEvent);\n          success = true;\n          \n          // DISABLED: Automatic RUN command trigger to prevent unwanted execution\n          // The program should only run when explicitly requested by the user\n          console.log(\"\u2705 Program loaded successfully - no automatic RUN command sent\");\n        }\n      } catch (e) {\n        console.log(\"Drag-and-drop trigger failed:\", e);\n      }\n    }\n    \n    if (!success) {\n      console.error(\"c64_quickload function not found!\");\n      console.log(\"Trying alternative function names...\");\n      \n      // Try alternative function names that might be used\n      const alternatives = ['quickload', 'load_prg', 'load_program', 'load_rom'];\n      for (const alt of alternatives) {\n        if (typeof (window as any)[alt] === 'function') {\n          console.log(`Found alternative function: ${alt}`);\n          (window as any)[alt](prgData);\n          return;\n        }\n        if (this.module && typeof (this.module as any)[alt] === 'function') {\n          console.log(`Found alternative function on module: ${alt}`);\n          (this.module as any)[alt](prgData);\n          return;\n        }\n      }\n      \n      console.error(\"No quickload function found with any name!\");\n    }\n  }\n\n  getCanvas(): HTMLCanvasElement | null {\n    return this.canvas;\n  }\n\n  getFPS(): number {\n    // Return a reasonable FPS estimate\n    return this.running ? 50 : 0;\n  }\n\n  // Memory access functions (if needed)\n  read(address: number): number {\n    if (this.module && typeof (this.module as any).c64_read_memory === 'function') {\n      return (this.module as any).c64_read_memory(address);\n    } else if (typeof (window as any).c64_read_memory === 'function') {\n      return (window as any).c64_read_memory(address);\n    }\n    return 0;\n  }\n\n  write(address: number, value: number): void {\n    if (this.module && this.module.c64_write_memory) {\n      this.module.c64_write_memory(address, value);\n    }\n  }\n\n  // Required method implementations\n  getCPUState(): CpuState {\n    // Return basic CPU state if available\n    if (this.module && this.module.c64_get_cpu_state) {\n      return this.module.c64_get_cpu_state();\n    }\n    return {\n      PC: 0,\n      SP: 0\n    };\n  }\n\n  saveState(): EmuState {\n    // Return empty state for now\n    return {\n      c: this.getCPUState(),\n      b: new Uint8Array(0)\n    };\n  }\n\n  loadState(state: EmuState): void {\n    // Load state if available\n    if (this.module && this.module.c64_load_state && state.b) {\n      this.module.c64_load_state(state.b);\n    }\n  }\n\n  // Cleanup\n  destroy(): void {\n    this.stop();\n    \n    // Remove focus tracking\n\n    this.module = null;\n    this.canvas = null;\n    \n    // Hide the C64 chips div when destroyed\n    const c64Div = document.getElementById('c64-chips-div');\n    if (c64Div) {\n      c64Div.style.display = 'none';\n      console.log(\"\u2705 Hidden C64 chips div\");\n    }\n  }\n\n  // Joystick support\n  private joymask0 = 0;\n  private joymask1 = 0;\n\n  setKeyInput(key: number, code: number, flags: number): void {\n    // Handle joystick input for C64\n    if (key == 16 || key == 17 || key == 18 || key == 224) return; // meta keys\n    \n    var mask = 0;\n    var mask2 = 0;\n    \n    // Player 1 joystick (arrow keys + space)\n    if (key == 37) { key = 0x8; mask = 0x4; } // LEFT\n    if (key == 38) { key = 0xb; mask = 0x1; } // UP\n    if (key == 39) { key = 0x9; mask = 0x8; } // RIGHT\n    if (key == 40) { key = 0xa; mask = 0x2; } // DOWN\n    if (key == 32) { mask = 0x10; } // FIRE (space)\n    \n    // Player 2 joystick (WASD + E)\n    if (key == 65) { key = 65; mask2 = 0x4; } // LEFT (A)\n    if (key == 87) { key = 87; mask2 = 0x1; } // UP (W)\n    if (key == 68) { key = 68; mask2 = 0x8; } // RIGHT (D)\n    if (key == 83) { key = 83; mask2 = 0x2; } // DOWN (S)\n    if (key == 69) { mask2 = 0x10; } // FIRE (E)\n    \n    // Function keys\n    if (key == 113) { key = 0xf1; } // F2\n    if (key == 115) { key = 0xf3; } // F4\n    if (key == 119) { key = 0xf5; } // F8\n    if (key == 121) { key = 0xf7; } // F10\n    \n    if (flags & 1) { // KeyDown\n      this.joymask0 |= mask;\n      this.joymask1 |= mask2;\n    } else if (flags & 2) { // KeyUp\n      this.joymask0 &= ~mask;\n      this.joymask1 &= ~mask2;\n    }\n    \n    // Update joystick state in the chips-test emulator\n    if (this.module && typeof this.module.c64_joystick === 'function') {\n      this.module.c64_joystick(this.joymask0, this.joymask1);\n    } else if ((window as any).h && typeof (window as any).h.c64_joystick === 'function') {\n      (window as any).h.c64_joystick(this.joymask0, this.joymask1);\n    }\n  }\n} ", "import { C64ChipsMachine } from \"../machine/c64\";\nimport { Platform, Preset } from \"../common/baseplatform\";\nimport { PLATFORMS } from \"../common/emu\";\nimport { RasterVideo, AnimationTimer } from \"../common/emu\";\n\nconst C64_PRESETS : Preset[] = [\n  {id:'helloc.c', name:'Hello World', category:'C Tutorial'},\n  {id:'petscii.c', name:'PETSCII Symbols'},\n  {id:'demo.c', name:'Scrolling Text and Music Demo'},\n  {id:'wordy.c', name:'Word Game'},\n  {id:'adventure.c', name:'Text Adventure'},\n  {id:'hello.bas', name:'Hello World (BASIC)', category:'BASIC Tutorial'},\n  {id:'dartmouth.bas', name:'BASIC Tutorial (BASIC)'},\n  {id:'colors.bas', name:'Color Demo (BASIC)'},\n  {id:'game.bas', name:'Number Game (BASIC)'},\n  {id:'labels.bas', name:'Label Demo (BASIC)'},\n  {id:'lander.bas', name:'Space Lander Game (BASIC)'},\n  {id:'adventure.bas', name:'Adventure Game (BASIC)'},\n  {id:'trek64.bas', name:'Star Trek (BASIC)'},\n  {id:'controlcodes.bas', name:'Control Codes Demo (BASIC)'},\n  {id:'hello.acme', name:'Hello World', category:'Assembly (ACME)'},\n  {id:'rasters.acme', name:'Rasters'},\n  {id:'screen_ram.c', name:'Screen RAM', category:'8-bit Workshop Demos'},\n  {id:'siegegame.c', name:'Siege Game'},\n  {id:'joymove.c', name:'Sprite Movement'},\n  {id:'sprite_collision.c', name:'Sprite Collision'},\n  {id:'scroll1.c', name:'Scrolling (Single Buffer)'},\n  {id:'test_setirq.c', name:'Raster Interrupts'},\n  {id:'test_display_list.c', name:'Raster IRQ Library'},\n  {id:'scrolling_text.c', name:'Big Scrolling Text'},\n  {id:'side_scroller.c', name:'Side-Scrolling Game'},\n  {id:'scroll2.c', name:'Scrolling (Double Buffer)'},\n  {id:'scroll3.c', name:'Scrolling (Multidirectional)'},\n  {id:'scroll4.c', name:'Scrolling (Color RAM Buffering)'},\n  {id:'scroll5.c', name:'Scrolling (Camera Following)'},\n  {id:'scrollingmap1.c', name:'Scrolling Tile Map'},\n  {id:'fullscrollgame.c', name:'Full-Scrolling Game'},\n  {id:'test_multiplex.c', name:'Sprite Retriggering'},\n  {id:'test_multispritelib.c', name:'Sprite Multiplexing Library'},\n  {id:'mcbitmap.c', name:'Multicolor Bitmap Mode'},\n  {id:'testlz4.c', name:'LZ4 Bitmap Compression'},\n  {id:'mandel.c', name:'Mandelbrot Fractal'},\n  {id:'musicplayer.c', name:'Music Player'},\n  {id:'siddemo.c', name:'SID Player Demo'},\n  {id:'digisound.c', name:'Digi Sound Player'},\n  {id:'climber.c', name:'Climber Game'},\n  {id:'test_border_sprites.c', name:'Sprites in the Borders'},\n  {id:'sprite_stretch.c', name:'Sprite Stretching'},\n  {id:'linecrunch.c', name:'Linecrunch'},\n  {id:'fld.c', name:'Flexible Line Distance'},\n  {id:'plasma.c', name:'Plasma Demo'},\n  {id:'23matches.c', name:'23 Matches'},\n  {id:'tgidemo.c', name:'TGI Graphics Demo'},\n  {id:'upandaway.c', name:'Up, Up and Away'},\n\n];\n\nconst C64_MEMORY_MAP = { main:[\n  {name:'6510 Registers',start:0x0,  size:0x2,type:'io'},\n  {name:'BIOS Reserved', start:0x200,   size:0xa7},\n  {name:'Default Screen RAM', start:0x400,   size:1024,type:'ram'},\n  {name:'Cartridge ROM',start:0x8000,size:0x2000,type:'rom'},\n  {name:'BASIC ROM',    start:0xa000,size:0x2000,type:'rom'},\n  {name:'Upper RAM',    start:0xc000,size:0x1000,type:'ram'},\n  {name:'Character ROM',start:0xd000,size:0x1000,type:'rom'},\n  {name:'VIC-II I/O',   start:0xd000,size:0x0400,type:'io'},\n  {name:'SID',          start:0xd400,size:0x0400,type:'io'},\n  {name:'Color RAM',    start:0xd800,size:0x0400,type:'io'},\n  {name:'CIA 1',        start:0xdc00,size:0x0100,type:'io'},\n  {name:'CIA 2',        start:0xdd00,size:0x0100,type:'io'},\n  {name:'I/O 1',        start:0xde00,size:0x0100,type:'io'},\n  {name:'I/O 2',        start:0xdf00,size:0x0100,type:'io'},\n  {name:'KERNAL ROM',   start:0xe000,size:0x2000,type:'rom'},\n] }\n\n// Chips-test C64 platform\nclass C64ChipsPlatform implements Platform {\n  private machine: C64ChipsMachine;\n  private mainElement: HTMLElement;\n  private timer: AnimationTimer;\n  private video: RasterVideo;\n  private running = false;\n  private pauseResumeSupported = false;\n\n  constructor(mainElement: HTMLElement) {\n    this.mainElement = mainElement;\n    this.machine = new C64ChipsMachine();\n  }\n\n  async start(): Promise<void> {\n    console.log(\"C64ChipsPlatform start() called - EMULATOR DISABLED FOR TESTING\");\n    \n    // Set up message listener for iframe capabilities\n    this.setupIframeMessageListener();\n    \n    // Initially hide pause/resume buttons until we know if they're supported\n    this.pauseResumeSupported = false;\n    setTimeout(() => this.updateControlButtons(), 100);\n    \n    // Create iframe for C64 emulator\n    const iframe = document.createElement('iframe');\n    iframe.id = 'c64-iframe';\n    iframe.style.width = '100%';\n    iframe.style.height = '600px';\n    iframe.style.border = '1px solid #ccc';\n    iframe.style.backgroundColor = '#000';\n    \n    // Add iframe to the main element\n    this.mainElement.innerHTML = '';\n    this.mainElement.appendChild(iframe);\n    console.log(\"C64ChipsPlatform: iframe created, setting up with auto-compilation\");\n    \n    // Set up iframe with auto-compilation (async)\n    this.setupIframeWithAutoCompilation().catch(error => {\n      console.error(\"C64ChipsPlatform: Error in setupIframeWithAutoCompilation:\", error);\n    });\n  }\n\n  private nextFrame(): void {\n    if (this.running) {\n      // The chips-test emulator handles its own frame updates\n      // We just need to keep the timer running\n    }\n  }\n\n  private setupIframeMessageListener(): void {\n    window.addEventListener('message', (event) => {\n      // Only accept messages from our iframe\n      const iframe = document.getElementById(\"c64-iframe\") as HTMLIFrameElement;\n      if (!iframe || event.source !== iframe.contentWindow) {\n        return;\n      }\n\n      if (event.data && event.data.type === 'emulator_capabilities') {\n        console.log(\"C64ChipsPlatform: Received emulator capabilities:\", event.data.capabilities);\n        \n        if (event.data.capabilities && typeof event.data.capabilities.pauseResume === 'boolean') {\n          this.pauseResumeSupported = event.data.capabilities.pauseResume;\n          console.log(\"C64ChipsPlatform: Pause/resume supported:\", this.pauseResumeSupported);\n          \n          // Update the UI to show/hide pause/resume buttons\n          this.updateControlButtons();\n        }\n      }\n    });\n  }\n\n  private updateControlButtons(): void {\n    // Find the control buttons in the UI and show/hide them based on capability\n    const pauseButton = document.getElementById('dbg_pause') as HTMLElement;\n    const resumeButton = document.getElementById('dbg_go') as HTMLElement;\n    \n    if (pauseButton) {\n      pauseButton.style.display = this.pauseResumeSupported ? 'inline-block' : 'none';\n      console.log(\"C64ChipsPlatform: Pause button visibility:\", this.pauseResumeSupported ? 'visible' : 'hidden');\n    } else {\n      console.log(\"C64ChipsPlatform: Pause button not found\");\n    }\n    \n    if (resumeButton) {\n      resumeButton.style.display = this.pauseResumeSupported ? 'inline-block' : 'none';\n      console.log(\"C64ChipsPlatform: Resume button visibility:\", this.pauseResumeSupported ? 'visible' : 'hidden');\n    } else {\n      console.log(\"C64ChipsPlatform: Resume button not found\");\n    }\n  }\n\n  reset(): void {\n    // Send reset command to iframe emulator\n    const frame = document.getElementById(\"c64-iframe\") as HTMLIFrameElement;\n    if (frame && frame.contentWindow) {\n      frame.contentWindow.postMessage({ type: 'reset' }, '*');\n      console.log(\"C64ChipsPlatform: Sent reset command to iframe\");\n    }\n    \n    // Also reset the local machine for consistency\n    if (this.machine) {\n      this.machine.reset();\n    }\n  }\n\n  isRunning(): boolean {\n    return this.running;\n  }\n\n  pause(): void {\n    if (!this.pauseResumeSupported) {\n      console.log(\"C64ChipsPlatform: Pause not supported by emulator\");\n      return;\n    }\n    \n    // Send pause command to iframe emulator\n    const frame = document.getElementById(\"c64-iframe\") as HTMLIFrameElement;\n    if (frame && frame.contentWindow) {\n      frame.contentWindow.postMessage({ type: 'pause' }, '*');\n      console.log(\"C64ChipsPlatform: Sent pause command to iframe\");\n    }\n    \n    // Also pause the local machine for consistency\n    if (this.machine) {\n      this.machine.stop();\n      this.running = false;\n    }\n  }\n\n  resume(): void {\n    if (!this.pauseResumeSupported) {\n      console.log(\"C64ChipsPlatform: Resume not supported by emulator\");\n      return;\n    }\n    \n    // Send resume command to iframe emulator\n    const frame = document.getElementById(\"c64-iframe\") as HTMLIFrameElement;\n    if (frame && frame.contentWindow) {\n      frame.contentWindow.postMessage({ type: 'resume' }, '*');\n      console.log(\"C64ChipsPlatform: Sent resume command to iframe\");\n    }\n    \n    // Also resume the local machine for consistency\n    if (this.machine) {\n      this.machine.run();\n      this.running = true;\n    }\n  }\n\n  loadROM(title: string, rom: Uint8Array): void {\n    console.log(\"C64ChipsPlatform loadROM called with title:\", title, \"and\", rom.length, \"bytes\");\n    \n    var frame = document.getElementById(\"c64-iframe\") as HTMLIFrameElement;\n    if (frame && frame.contentWindow) {\n      // Instead of using URL parameters for large programs, use postMessage\n      if (rom.length > 1000) { // If program is larger than 1KB, use postMessage\n        console.log(\"C64ChipsPlatform: Large program detected, using postMessage instead of URL\");\n        \n        // Load the iframe with just the base URL\n        const baseURL = 'c64-iframe.html?t=' + Date.now();\n        frame.src = baseURL;\n        \n        // Set up a one-time load event listener\n        const onLoad = () => {\n          console.log(\"C64ChipsPlatform: iframe loaded, sending program via postMessage\");\n          // Send the program data via postMessage\n          frame.contentWindow!.postMessage({\n            type: 'compiled_program',\n            program: rom,\n            autoLoad: true\n          }, '*');\n          frame.removeEventListener('load', onLoad);\n        };\n        frame.addEventListener('load', onLoad);\n      } else {\n        // For small programs, still use URL parameters\n        const c64_debug = (window as any).c64_debug;\n        if (c64_debug && c64_debug.openIframeWithCurrentProgram) {\n          // Handle async generateIframeURL\n          c64_debug.generateIframeURL(rom).then((iframeURL: string) => {\n            console.log(\"C64ChipsPlatform: Generated iframe URL:\", iframeURL);\n            \n            if (iframeURL) {\n              const cacheBuster = '&t=' + Date.now();\n              const freshURL = iframeURL + cacheBuster;\n              console.log(\"C64ChipsPlatform: Loading fresh URL with cache buster:\", freshURL);\n              \n              // Set up a one-time load event listener\n              const onLoad = () => {\n                console.log(\"C64ChipsPlatform: iframe loaded, calling checkForProgramInURL\");\n                if ((frame.contentWindow as any).checkForProgramInURL) {\n                  (frame.contentWindow as any).checkForProgramInURL();\n                }\n                frame.removeEventListener('load', onLoad);\n              };\n              frame.addEventListener('load', onLoad);\n              \n              // Set the location (this triggers the load event)\n              frame.contentWindow.location = freshURL;\n            } else {\n              console.error(\"C64ChipsPlatform: generateIframeURL returned null\");\n            }\n          }).catch((error: any) => {\n            console.error(\"C64ChipsPlatform: Error generating iframe URL:\", error);\n          });\n        } else {\n          console.error(\"C64ChipsPlatform: c64_debug not available\");\n        }\n      }\n    } else {\n      console.error(\"C64ChipsPlatform: iframe not found or contentWindow not available\");\n    }\n    \n    if (this.machine) {\n      this.machine.loadProgram(rom);\n    } else {\n      console.error(\"C64ChipsPlatform: machine is null!\");\n    }\n  }\n\n  // New method to handle initial iframe setup with auto-compilation\n  private async setupIframeWithAutoCompilation() {\n    console.log(\"C64ChipsPlatform: Setting up iframe with auto-compilation\");\n    \n    // Check if we have a compiled program\n    const output = (window as any).IDE?.getCurrentOutput();\n    if (output && output instanceof Uint8Array) {\n      console.log(\"C64ChipsPlatform: Found compiled program, loading iframe\");\n      \n      const c64_debug = (window as any).c64_debug;\n      if (c64_debug && c64_debug.generateIframeURL) {\n        try {\n          // Await the async generateIframeURL function\n          const iframeURL = await c64_debug.generateIframeURL(output);\n          console.log(\"C64ChipsPlatform: Generated iframe URL:\", iframeURL);\n          \n          if (iframeURL) {\n            await this.loadIframeWithProgram(iframeURL);\n          } else {\n            console.error(\"C64ChipsPlatform: generateIframeURL returned null\");\n          }\n        } catch (error) {\n          console.error(\"C64ChipsPlatform: Error generating iframe URL:\", error);\n        }\n      } else {\n        console.error(\"C64ChipsPlatform: c64_debug not available\");\n      }\n    } else {\n      console.log(\"C64ChipsPlatform: No compiled program found, triggering compilation\");\n      await this.triggerCompilationAndReload();\n    }\n  }\n\n  private async loadIframeWithProgram(iframeURL: string) {\n    console.log(\"C64ChipsPlatform: Loading iframe with program URL:\", iframeURL);\n    \n    var frame = document.getElementById(\"c64-iframe\") as HTMLIFrameElement;\n    if (frame && frame.contentWindow) {\n      const cacheBuster = '&t=' + Date.now();\n      const freshURL = iframeURL + cacheBuster;\n      console.log(\"C64ChipsPlatform: Loading fresh URL with cache buster:\", freshURL);\n      \n      // Set up a one-time load event listener\n      const onLoad = () => {\n        console.log(\"C64ChipsPlatform: iframe loaded, calling checkForProgramInURL\");\n        if ((frame.contentWindow as any).checkForProgramInURL) {\n          (frame.contentWindow as any).checkForProgramInURL();\n        }\n        frame.removeEventListener('load', onLoad);\n      };\n      frame.addEventListener('load', onLoad);\n      \n      // Set the location (this triggers the load event)\n      frame.contentWindow.location = freshURL;\n    } else {\n      console.error(\"C64ChipsPlatform: iframe not found or contentWindow not available\");\n    }\n  }\n\n  private async triggerCompilationAndReload() {\n    console.log(\"C64ChipsPlatform: Triggering compilation and reload\");\n    \n    // Set up a one-time compilation listener\n    this.setupCompilationListener();\n    \n    // Trigger compilation\n    const worker = (window as any).worker;\n    if (worker && worker.postMessage) {\n      console.log(\"C64ChipsPlatform: Triggering compilation via worker\");\n      \n      // Get current project files\n      const project = (window as any).IDE?.getCurrentProject();\n      const files = project?.getFiles() || {};\n      \n      // Create proper worker message format\n      const mainFile = Object.keys(files)[0] || 'program.bas';\n      const message = {\n        updates: Object.entries(files).map(([path, data]) => ({\n          path: path,\n          data: typeof data === 'string' ? data : new TextDecoder().decode(data as Uint8Array)\n        })),\n        buildsteps: [{\n          path: mainFile,\n          files: [mainFile],\n          platform: 'c64',\n          tool: 'c64basic',\n          mainfile: true\n        }]\n      };\n      \n      worker.postMessage(message);\n    } else {\n      console.error(\"C64ChipsPlatform: Worker not available for compilation\");\n    }\n  }\n\n  private setupCompilationListener() {\n    console.log(\"C64ChipsPlatform: Setting up compilation listener\");\n    \n    // Hook into the global setCompileOutput function to detect successful compilations\n    const originalSetCompileOutput = (window as any).setCompileOutput;\n    (window as any).setCompileOutput = (output: any) => {\n      // Call the original function\n      if (originalSetCompileOutput) {\n        originalSetCompileOutput(output);\n      }\n      \n      // If we have output, reload the iframe with the new program\n      if (output && output instanceof Uint8Array) {\n        console.log(\"C64ChipsPlatform: Compilation completed, reloading iframe with new program\");\n        \n        // Wait a bit for the compilation output to be processed\n        setTimeout(async () => {\n          const c64_debug = (window as any).c64_debug;\n          if (c64_debug && c64_debug.generateIframeURL) {\n            try {\n              const newIframeURL = await c64_debug.generateIframeURL(output);\n              if (newIframeURL) {\n                await this.loadIframeWithProgram(newIframeURL);\n              }\n            } catch (error) {\n              console.error(\"C64ChipsPlatform: Error generating iframe URL after compilation:\", error);\n            }\n          }\n        }, 1000);\n      }\n    };\n  }\n\n  getPresets(): Preset[] {\n    return C64_PRESETS;\n  }\n\n  getDefaultExtension(): string {\n    return \".c\";\n  }\n\n  getToolForFilename(filename: string): string {\n    if (filename.toLowerCase().endsWith(\".bas\")) return \"c64basic\";\n    if (filename.endsWith(\".c\")) return \"cc65\";\n    if (filename.endsWith(\".dasm\")) return \"dasm\";\n    if (filename.endsWith(\".acme\")) return \"acme\";\n    if (filename.endsWith(\".wiz\")) return \"wiz\";\n    return \"cc65\";\n  }\n\n  readAddress(addr: number): number {\n    if (this.machine) {\n      return this.machine.read(addr);\n    }\n    return 0;\n  }\n\n  getMemoryMap() {\n    return C64_MEMORY_MAP;\n  }\n\n  showHelp(): string {\n    return \"https://8bitworkshop.com/docs/platforms/c64/\";\n  }\n\n  getROMExtension(rom: Uint8Array): string {\n    if (rom && rom[0] == 0x01 && rom[1] == 0x08) return \".prg\";\n    else return \".bin\";\n  }\n\n  // Optional methods with default implementations\n  getCPUState() {\n    if (this.machine) {\n      return this.machine.getCPUState();\n    }\n    return { PC: 0, SP: 0 };\n  }\n\n  saveState() {\n    if (this.machine) {\n      return this.machine.saveState();\n    }\n    return { c: { PC: 0, SP: 0 }, b: new Uint8Array(0) };\n  }\n\n  loadState(state: any): void {\n    if (this.machine) {\n      this.machine.loadState(state);\n    }\n  }\n\n  getPC(): number {\n    const cpuState = this.getCPUState();\n    return cpuState.PC;\n  }\n\n  getSP(): number {\n    const cpuState = this.getCPUState();\n    return cpuState.SP;\n  }\n\n  isStable(): boolean {\n    return true; // Assume stable for chips-test emulator\n  }\n\n  getExtraCompileFiles(filename: string): string[] {\n    // Add binary files needed for specific demos\n    if (filename === 'sidplaysfx.s') {\n      return ['sidmusic1.bin'];\n    }\n    return [];\n  }\n}\n\nPLATFORMS['c64'] = C64ChipsPlatform;\n\n// Export the platform class for dynamic loading\nexport default C64ChipsPlatform; "],
  "mappings": "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",
  "names": []
}
