{
  "version": 3,
  "sources": ["../src/platform/msx-shell.ts"],
  "sourcesContent": ["import { MSX1 } from \"../machine/msx\";\nimport { Platform, BaseZ80MachinePlatform } from \"../common/baseplatform\";\nimport { PLATFORMS } from \"../common/emu\";\nimport { TeleTypeWithKeyboard } from \"../common/teletype\";\nimport { AnimationTimer } from \"../common/emu\";\n\n// MSX Platform with Command Shell Interface\n// Combines full MSX emulation with interactive development shell\n\nconst MSX_SHELL_PRESETS = [\n  {id:'helloworld.asm', name:'Hello World (Z80 ASM)', category:'Assembly Tutorial'},\n  {id:'helloworld.c', name:'Hello World (C)', category:'C Programming'},\n  {id:'console_demo.c', name:'Console I/O Demo (C)', category:'C Programming'},\n  {id:'graphics_demo.c', name:'Graphics Demo (C)', category:'C Programming'},\n  {id:'sound_demo.c', name:'Sound Demo (C)', category:'C Programming'},\n  {id:'game_demo.c', name:'Game Demo (C)', category:'C Programming'},\n];\n\nclass MSXShellPlatform extends BaseZ80MachinePlatform<MSX1> implements Platform {\n    private tty: TeleTypeWithKeyboard;\n    public timer: AnimationTimer;\n    private commandHistory: string[] = [];\n    private historyIndex: number = -1;\n    private currentDirectory: string = \"A:\";\n    private files: { [name: string]: Uint8Array } = {};\n    private compiledPrograms: {[filename: string]: Uint8Array} = {};\n\n    constructor(mainElement: HTMLElement) {\n        super(mainElement);\n        this.setupVirtualFileSystem();\n    }\n\n    newMachine() { \n        return new MSX1(); \n    }\n\n    getPresets() { \n        return MSX_SHELL_PRESETS; \n    }\n\n    getDefaultExtension() { \n        return \".c\"; \n    }\n\n    readAddress(a) { \n        return this.machine.read(a); \n    }\n\n    readVRAMAddress(a) { \n        return this.machine.readVRAMAddress(a); \n    }\n\n    getMemoryMap = function() { return { main:[\n        {name:'BIOS',start:0x0,size:0x4000,type:'rom'},\n        {name:'RAM',start:0xc000,size:0x3200,type:'ram'},\n        {name:'Stack',start:0xf000,size:0x300,type:'ram'},\n        {name:'BIOS Work RAM',start:0xf300,size:0xd00},\n    ] } };\n\n    async start() {\n        // Create command interface UI first\n        this.createCommandInterface();\n\n        // Initialize the MSX machine properly\n        this.initializeMachine();\n\n        // Start the command shell\n        this.startCommandShell();\n    }\n\n    private initializeMachine() {\n        try {\n            this.machine = this.newMachine();\n            // Don't call reset() here - let the user do it manually if needed\n            console.log('MSX machine initialized successfully');\n        } catch (error) {\n            console.log('MSX machine initialization failed:', error);\n        }\n    }\n\n    private createCommandInterface() {\n        // Clear main element\n        this.mainElement.innerHTML = '';\n        this.mainElement.style.overflowY = 'auto';\n\n        // Create terminal container\n        const terminal = document.createElement('div');\n        terminal.id = 'msx-shell-terminal';\n        terminal.style.cssText = `\n            background: #000;\n            color: #0f0;\n            font-family: 'Courier New', monospace;\n            font-size: 14px;\n            padding: 10px;\n            height: 100%;\n            overflow-y: auto;\n            white-space: pre-wrap;\n        `;\n\n        // Create input container\n        const inputContainer = document.createElement('div');\n        inputContainer.style.cssText = `\n            display: flex;\n            align-items: center;\n            margin-top: 5px;\n        `;\n\n        const prompt = document.createElement('span');\n        prompt.className = 'prompt';\n        prompt.textContent = `${this.currentDirectory}> `;\n        prompt.style.color = '#0f0';\n\n        const input = document.createElement('input');\n        input.type = 'text';\n        input.style.cssText = `\n            background: transparent;\n            border: none;\n            color: #0f0;\n            font-family: 'Courier New', monospace;\n            font-size: 14px;\n            outline: none;\n            flex: 1;\n            margin-left: 5px;\n        `;\n\n        inputContainer.appendChild(prompt);\n        inputContainer.appendChild(input);\n        terminal.appendChild(inputContainer);\n        this.mainElement.appendChild(terminal);\n\n        // Set up input handling\n        this.setupInputHandling(input, terminal);\n    }\n\n    private setupInputHandling(input: HTMLInputElement, terminal: HTMLElement) {\n        const addOutput = (text: string, color?: string) => {\n            const output = document.createElement('div');\n            output.textContent = text;\n            if (color) output.style.color = color;\n            terminal.insertBefore(output, terminal.lastElementChild);\n            terminal.scrollTop = terminal.scrollHeight;\n        };\n\n        input.addEventListener('keydown', (e) => {\n            if (e.key === 'Enter') {\n                const command = input.value.trim();\n                if (command) {\n                    this.commandHistory.push(command);\n                    this.historyIndex = this.commandHistory.length;\n                    input.value = '';\n\n                    // Add command to output\n                    addOutput(`${this.currentDirectory}> ${command}`);\n\n                    // Parse and execute command\n                    const parts = command.trim().split(/\\s+/);\n                    const cmd = parts[0].toLowerCase();\n\n                    switch (cmd) {\n                        case 'dir':\n                        case 'ls':\n                            this.executeDir(parts, addOutput);\n                            break;\n                        case 'type':\n                        case 'cat':\n                            this.executeType(parts, addOutput);\n                            break;\n                        case 'del':\n                        case 'rm':\n                            this.executeDel(parts, addOutput);\n                            break;\n                        case 'copy':\n                        case 'cp':\n                            this.executeCopy(parts, addOutput);\n                            break;\n                        case 'ren':\n                        case 'mv':\n                            this.executeRen(parts, addOutput);\n                            break;\n                        case 'cd':\n                            this.executeCd(parts, addOutput);\n                            break;\n                        case 'cls':\n                        case 'clear':\n                            terminal.innerHTML = '';\n                            terminal.appendChild(input.parentElement!);\n                            break;\n                        case 'help':\n                            this.executeHelp(addOutput);\n                            break;\n                        case 'asm':\n                            this.executeAsm(parts, addOutput);\n                            break;\n                        case 'run':\n                            this.executeRun(parts, addOutput);\n                            break;\n                        case 'mem':\n                            this.executeMem(addOutput);\n                            break;\n                        case 'reg':\n                            this.executeReg(addOutput);\n                            break;\n                        case 'reset':\n                            this.executeReset(addOutput);\n                            break;\n                        case 'load':\n                            this.executeLoad(parts, addOutput);\n                            break;\n                        case 'exit':\n                        case 'quit':\n                            addOutput('Goodbye!', '#ff0');\n                            break;\n                        case '':\n                            // Empty command, do nothing\n                            break;\n                        default:\n                            // Check if it's a filename that can be executed\n                            if (this.isExecutableFile(cmd, parts)) {\n                                // Treat as RUN command\n                                this.executeRun(parts, addOutput);\n                            } else {\n                                addOutput(`Bad command or file name: ${cmd}`, '#f00');\n                                addOutput('Type HELP for available commands.', '#ff0');\n                            }\n                    }\n                }\n            } else if (e.key === 'ArrowUp') {\n                e.preventDefault();\n                if (this.historyIndex > 0) {\n                    this.historyIndex--;\n                    input.value = this.commandHistory[this.historyIndex];\n                }\n            } else if (e.key === 'ArrowDown') {\n                e.preventDefault();\n                if (this.historyIndex < this.commandHistory.length - 1) {\n                    this.historyIndex++;\n                    input.value = this.commandHistory[this.historyIndex];\n                } else {\n                    this.historyIndex = this.commandHistory.length;\n                    input.value = '';\n                }\n            }\n        });\n\n        // Focus input\n        input.focus();\n\n        // Display welcome message\n        setTimeout(() => {\n            const terminal = this.mainElement.querySelector('#msx-shell-terminal');\n            if (terminal) {\n                const welcome = document.createElement('div');\n                welcome.innerHTML = `\nMSX Development Shell\nRetroGameCoders.com 2025\nFull MSX Emulation with BIOS Support\n\nType HELP for available commands.\nType ASM to assemble current editor content.\nType RUN to execute programs.\n\n`;\n                welcome.style.color = '#0f0';\n                terminal.insertBefore(welcome, terminal.lastElementChild);\n            }\n        }, 100);\n    }\n\n    private setupVirtualFileSystem() {\n        // Add some example C programs\n        this.files['HELLO.C'] = new TextEncoder().encode(`#include <stdio.h>\n#include \"msxbios.h\"\n\nint main() {\n    CLS();\n    POSIT(0x0101);  // Row 1, Column 1\n    CHPUT('H');\n    CHPUT('e');\n    CHPUT('l');\n    CHPUT('l');\n    CHPUT('o');\n    CHPUT(',');\n    CHPUT(' ');\n    CHPUT('M');\n    CHPUT('S');\n    CHPUT('X');\n    CHPUT('!');\n    CHPUT(13);  // Carriage return\n    CHPUT(10);  // Line feed\n    \n    // Wait for key press\n    CHGET();\n    return 0;\n}`);\n        \n        this.files['CONSOLE.C'] = new TextEncoder().encode(`#include <stdio.h>\n#include \"msxbios.h\"\n\nint main() {\n    CLS();\n    POSIT(0x0101);  // Row 1, Column 1\n    \n    // Print welcome message\n    const char* msg = \"MSX Console I/O Demo\";\n    while (*msg) {\n        CHPUT(*msg++);\n    }\n    \n    POSIT(0x0301);  // Row 3, Column 1\n    msg = \"Press any key to continue...\";\n    while (*msg) {\n        CHPUT(*msg++);\n    }\n    \n    // Wait for key press\n    char key = CHGET();\n    \n    POSIT(0x0501);  // Row 5, Column 1\n    msg = \"You pressed: \";\n    while (*msg) {\n        CHPUT(*msg++);\n    }\n    CHPUT(key);\n    \n    POSIT(0x0701);  // Row 7, Column 1\n    msg = \"Press any key to exit...\";\n    while (*msg) {\n        CHPUT(*msg++);\n    }\n    \n    CHGET();\n    return 0;\n}`);\n        \n        // Add msxbios.asm for C programs\n        this.files['MSXBIOS.ASM'] = new TextEncoder().encode(`; MSX BIOS function implementations for C programs\n; This file provides C-callable wrappers for MSX BIOS functions\n\n        .module msxbios\n        .area   _CODE\n\n; CLS - Clear screen\n_CLS::\n        call    0x00C3\n        ret\n\n; POSIT - Position cursor\n; Parameters: row (A), col (H)\n_POSIT::\n        ld      a, 4(sp)    ; Get row parameter\n        ld      h, 5(sp)    ; Get col parameter\n        call    0x00C6\n        ret\n\n; CHPUT - Character output\n; Parameter: character in A\n_CHPUT::\n        ld      a, 4(sp)    ; Get character parameter\n        call    0x00A2\n        ret\n\n; CHGET - Character input\n; Returns: character in A\n_CHGET::\n        call    0x009F\n        ld      l, a        ; Return value in L\n        ret\n\n; GTSTCK - Get joystick status\n_GTSTCK::\n        ld      a, 4(sp)    ; Get stick parameter\n        call    0x00D5\n        ld      l, a        ; Return value in L\n        ret\n\n; GTTRIG - Get trigger status\n_GTTRIG::\n        ld      a, 4(sp)    ; Get trigger parameter\n        call    0x00D8\n        ld      l, a        ; Return value in L\n        ret\n\n; SNSMAT - Sense matrix\n_SNSMAT::\n        ld      a, 4(sp)    ; Get matrix parameter\n        call    0x0141\n        ld      l, a        ; Return value in L\n        ret\n\n; KILBUF - Clear keyboard buffer\n_KILBUF::\n        call    0x0156\n        ret\n\n; CALBAS - Call BASIC\n_CALBAS::\n        call    0x0159\n        ret\n\n; EXTROM - Call external ROM\n_EXTROM::\n        call    0x015F\n        ret\n\n; CHGCPU - Change CPU mode\n_CHGCPU::\n        ld      a, 4(sp)    ; Get mode parameter\n        call    0x0180\n        ret\n\n; GETCPU - Get CPU mode\n_GETCPU::\n        call    0x0183\n        ld      l, a        ; Return value in L\n        ret\n\n; PCMPLY - PCM play\n_PCMPLY::\n        call    0x0186\n        ret\n\n; PCMREC - PCM record\n_PCMREC::\n        call    0x0189\n        ret`);\n    }\n\n    private async sendBuildStep(buildStep: any, sourceCode: Uint8Array): Promise<any> {\n        // Use the global worker from the IDE\n        const worker = (window as any).worker;\n        if (!worker) {\n            throw new Error('Global worker not available');\n        }\n\n        // Create a worker message with the build step\n        const updates = [{\n            path: buildStep.path,\n            data: new TextDecoder().decode(sourceCode)\n        }];\n\n        // For C files, also include msxbios.asm\n        if (buildStep.path.endsWith('.C') && this.files['MSXBIOS.ASM']) {\n            updates.push({\n                path: 'msxbios.asm',\n                data: new TextDecoder().decode(this.files['MSXBIOS.ASM'])\n            });\n        }\n\n        const message = {\n            updates: updates,\n            buildsteps: [buildStep]\n        };\n\n        // Send to worker and wait for result\n        return new Promise((resolve, reject) => {\n            const originalOnMessage = worker.onmessage;\n            let resolved = false;\n            \n            worker.onmessage = (event: MessageEvent) => {\n                // Call the original handler first\n                if (originalOnMessage) {\n                    originalOnMessage.call(worker, event);\n                }\n                \n                // Check if this is our build result\n                if (!resolved && event.data && (event.data.output || event.data.errors)) {\n                    resolved = true;\n                    worker.onmessage = originalOnMessage;\n                    resolve(event.data);\n                }\n            };\n            \n            worker.onerror = (error) => {\n                if (!resolved) {\n                    resolved = true;\n                    worker.onmessage = originalOnMessage;\n                    reject(error);\n                }\n            };\n            \n            // Set a timeout to prevent hanging\n            setTimeout(() => {\n                if (!resolved) {\n                    resolved = true;\n                    worker.onmessage = originalOnMessage;\n                    reject(new Error('Assembly timeout'));\n                }\n            }, 10000);\n            \n            worker.postMessage(message);\n        });\n    }\n\n    private startCommandShell() {\n        // Command shell is already started in createCommandInterface\n    }\n\n    // Command implementations\n    private executeDir(parts: string[], addOutput: (text: string, color?: string) => void) {\n        const files = Object.keys(this.files);\n        if (files.length === 0) {\n            addOutput('No files found.');\n            return;\n        }\n\n        addOutput('Directory of A:\\\\');\n        addOutput('');\n        files.forEach(file => {\n            const size = this.files[file].length;\n            addOutput(`${file.padEnd(12)} ${size.toString().padStart(8)} bytes`);\n        });\n        addOutput(`${files.length} file(s)`);\n    }\n\n    private executeType(parts: string[], addOutput: (text: string, color?: string) => void) {\n        if (parts.length < 2) {\n            addOutput('Usage: TYPE <filename>');\n            return;\n        }\n\n        const filename = parts[1].toUpperCase();\n        if (this.files[filename]) {\n            const content = new TextDecoder().decode(this.files[filename]);\n            addOutput(`Contents of ${filename}:`);\n            addOutput('');\n            addOutput(content);\n        } else {\n            addOutput(`File not found: ${filename}`);\n        }\n    }\n\n    private executeDel(parts: string[], addOutput: (text: string, color?: string) => void) {\n        if (parts.length < 2) {\n            addOutput('Usage: DEL <filename>');\n            return;\n        }\n\n        const filename = parts[1].toUpperCase();\n        if (this.files[filename]) {\n            delete this.files[filename];\n            addOutput(`File deleted: ${filename}`);\n        } else {\n            addOutput(`File not found: ${filename}`);\n        }\n    }\n\n    private executeCopy(parts: string[], addOutput: (text: string, color?: string) => void) {\n        if (parts.length < 3) {\n            addOutput('Usage: COPY <source> <destination>');\n            return;\n        }\n\n        const source = parts[1].toUpperCase();\n        const dest = parts[2].toUpperCase();\n        \n        if (this.files[source]) {\n            this.files[dest] = this.files[source];\n            addOutput(`File copied: ${source} -> ${dest}`);\n        } else {\n            addOutput(`Source file not found: ${source}`);\n        }\n    }\n\n    private executeRen(parts: string[], addOutput: (text: string, color?: string) => void) {\n        if (parts.length < 3) {\n            addOutput('Usage: REN <oldname> <newname>');\n            return;\n        }\n\n        const oldname = parts[1].toUpperCase();\n        const newname = parts[2].toUpperCase();\n        \n        if (this.files[oldname]) {\n            this.files[newname] = this.files[oldname];\n            delete this.files[oldname];\n            addOutput(`File renamed: ${oldname} -> ${newname}`);\n        } else {\n            addOutput(`File not found: ${oldname}`);\n        }\n    }\n\n    private executeCd(parts: string[], addOutput: (text: string, color?: string) => void) {\n        if (parts.length < 2) {\n            addOutput(`Current directory: ${this.currentDirectory}`);\n            return;\n        }\n\n        const newDir = parts[1].toUpperCase();\n        if (newDir === 'A:' || newDir === 'B:' || newDir === 'C:') {\n            this.currentDirectory = newDir;\n            addOutput(`Current directory is now ${this.currentDirectory}`);\n            // Update the prompt to show the new directory\n            this.updatePrompt();\n        } else {\n            addOutput('Invalid drive. Use A:, B:, or C:');\n        }\n    }\n\n    private updatePrompt() {\n        const prompt = this.mainElement.querySelector('.prompt') as HTMLElement;\n        if (prompt) {\n            prompt.textContent = `${this.currentDirectory}> `;\n        }\n    }\n\n    private isExecutableFile(cmd: string, parts: string[]): boolean {\n        // Check if it's a .COM file\n        if (this.files[cmd.toUpperCase() + '.COM']) {\n            return true;\n        }\n        \n        // Check if it's a compiled .ASM file\n        if (this.compiledPrograms[cmd.toUpperCase() + '.ASM']) {\n            return true;\n        }\n        \n        // Check if it's a compiled .C file\n        if (this.compiledPrograms[cmd.toUpperCase() + '.C']) {\n            return true;\n        }\n        \n        // Check if it's a .COM file without extension\n        if (cmd.toUpperCase().endsWith('.COM') && this.files[cmd.toUpperCase()]) {\n            return true;\n        }\n        \n        return false;\n    }\n\n    private executeHelp(addOutput: (text: string, color?: string) => void) {\n        addOutput('MSX Development Shell');\n        addOutput('');\n        addOutput('File Commands:');\n        addOutput('  DIR, LS          - List directory');\n        addOutput('  TYPE <file>      - Display file contents');\n        addOutput('  DEL <file>       - Delete file');\n        addOutput('  COPY <src> <dst> - Copy file');\n        addOutput('  REN <old> <new>  - Rename file');\n        addOutput('  CD <drive>       - Change drive (A:, B:, C:)');\n        addOutput('  CLS, CLEAR       - Clear screen');\n        addOutput('  HELP             - Show this help');\n        addOutput('  EXIT, QUIT       - Exit interface');\n        addOutput('');\n        addOutput('Development Commands:');\n        addOutput('  ASM              - Assemble current editor content');\n        addOutput('  ASM <file>       - Assemble specified file');\n        addOutput('  RUN <file>       - Execute program');\n        addOutput('  LOAD <file>      - Load compiled program');\n        addOutput('  MEM              - Show memory map');\n        addOutput('  REG              - Show CPU registers');\n        addOutput('  RESET            - Reset CPU');\n        addOutput('');\n        addOutput('Examples:');\n        addOutput('  ASM              - Assemble code in editor');\n        addOutput('  ASM HELLO.C      - Assemble C file');\n        addOutput('  RUN HELLO        - Execute program');\n        addOutput('  HELLO            - Execute program (shortcut)');\n    }\n\n    private async executeAsm(parts: string[], addOutput: (text: string, color?: string) => void) {\n        let filename: string;\n        let sourceCode: Uint8Array;\n\n        if (parts.length >= 2) {\n            // Use specified filename\n            filename = parts[1].toUpperCase();\n            if (this.files[filename]) {\n                sourceCode = this.files[filename];\n            } else {\n                addOutput(`File not found: ${filename}`);\n                return;\n            }\n        } else {\n            // Use current editor content\n            filename = 'CURRENT.C';\n            try {\n                // Get current editor content from the IDE\n                const getCurrentProject = (window as any).IDE?.getCurrentProject;\n                const getCurrentMainFilename = (window as any).IDE?.getCurrentMainFilename;\n                \n                if (getCurrentProject && getCurrentMainFilename) {\n                    const currentProject = getCurrentProject();\n                    const currentFile = getCurrentMainFilename();\n                    const fileData = currentProject.getFile(currentFile);\n                    \n                    if (fileData) {\n                        sourceCode = new TextEncoder().encode(fileData);\n                        filename = currentFile.toUpperCase();\n                    } else {\n                        addOutput('No content in current editor');\n                        return;\n                    }\n                } else {\n                    addOutput('IDE not available - use ASM <filename>');\n                    return;\n                }\n            } catch (error) {\n                addOutput(`Error getting editor content: ${error.message}`);\n                return;\n            }\n        }\n\n        addOutput(`Compiling ${filename}...`);\n        \n        try {\n            // Determine tool based on file extension\n            const tool = filename.endsWith('.C') ? 'sdcc' : 'zmac';\n            \n            // Create a build step\n            const buildStep = {\n                path: filename,\n                files: [filename],\n                platform: 'msx-shell',\n                tool: tool,\n                mainfile: true\n            };\n\n            // For C files, we need to include msxbios.asm\n            if (filename.endsWith('.C')) {\n                // Add msxbios.asm to the files list\n                buildStep.files.push('msxbios.asm');\n            }\n\n            // Send the build step to the worker\n            const result = await this.sendBuildStep(buildStep, sourceCode);\n            \n            if (result.errors && result.errors.length > 0) {\n                addOutput('Compilation failed:', '#f00');\n                result.errors.forEach(error => {\n                    addOutput(`  Line ${error.line}: ${error.msg}`, '#f00');\n                });\n            } else if (result.output) {\n                addOutput('Compilation completed successfully!', '#0f0');\n                addOutput(`Output: ${result.output.length} bytes`, '#0f0');\n                \n                // Store the compiled output for execution\n                this.compiledPrograms[filename] = result.output;\n                \n                // Save the binary as a .COM file in the virtual filesystem\n                const comFilename = filename.replace(/\\.(C|ASM)$/, '.COM');\n                this.files[comFilename] = result.output;\n                addOutput(`Saved as: ${comFilename}`, '#0f0');\n                \n                addOutput('Use RUN command to execute the program.');\n            } else {\n                addOutput('Compilation completed but no output generated.');\n            }\n        } catch (error) {\n            addOutput(`Compilation failed: ${error.message}`, '#f00');\n        }\n    }\n\n    private executeRun(parts: string[], addOutput: (text: string, color?: string) => void) {\n        if (parts.length < 2) {\n            addOutput('Usage: RUN <filename>');\n            return;\n        }\n\n        let filename = parts[1].toUpperCase();\n        \n        // If no extension, try .COM first, then .C/.ASM\n        if (!filename.includes('.')) {\n            if (this.files[filename + '.COM']) {\n                filename = filename + '.COM';\n            } else if (this.compiledPrograms[filename + '.C']) {\n                filename = filename + '.C';\n            } else if (this.compiledPrograms[filename + '.ASM']) {\n                filename = filename + '.ASM';\n            } else {\n                addOutput(`Program not found: ${filename}`);\n                addOutput('Use ASM command to compile first.');\n                return;\n            }\n        }\n        \n        // Check if we have the compiled program\n        let program: Uint8Array;\n        if (this.files[filename] && filename.endsWith('.COM')) {\n            program = this.files[filename];\n        } else if (this.compiledPrograms[filename]) {\n            program = this.compiledPrograms[filename];\n        } else {\n            addOutput(`Program not compiled: ${filename}`);\n            addOutput('Use ASM command to compile first.');\n            return;\n        }\n\n        if (!this.machine || !this.machine.cpu) {\n            addOutput('CPU not initialized. Use RESET command first.');\n            return;\n        }\n\n        addOutput(`Running ${filename}...`);\n        \n        try {\n            // Load the compiled program into memory at 0x100 (CP/M standard)\n            for (let i = 0; i < program.length; i++) {\n                this.machine.write(0x100 + i, program[i]);\n            }\n            \n            // Set PC to start of program by loading state\n            const state = this.machine.cpu.saveState();\n            state.PC = 0x100;\n            this.machine.cpu.loadState(state);\n            \n            // Run the program with MSX BIOS call handling\n            let cycles = 0;\n            const maxCycles = 10000; // Prevent infinite loops\n            \n            while (cycles < maxCycles && this.machine.cpu.getPC() < 0x100 + program.length) {\n                const pc = this.machine.cpu.getPC();\n                const instruction = this.machine.read(pc);\n                \n                // Check for MSX BIOS calls\n                if (instruction === 0xCD) { // CALL instruction\n                    const low = this.machine.read(pc + 1);\n                    const high = this.machine.read(pc + 2);\n                    const addr = (high << 8) | low;\n                    \n                    // Debug: show all CALL instructions\n                    addOutput(`CALL 0x${addr.toString(16).padStart(4, '0')}`, '#888');\n                    \n                    // Handle MSX BIOS calls\n                    if (this.handleMSXBIOSCall(addr, addOutput)) {\n                        // BIOS call handled, advance PC past CALL instruction\n                        const newState = this.machine.cpu.saveState();\n                        newState.PC = pc + 3;\n                        this.machine.cpu.loadState(newState);\n                        cycles += 10;\n                        continue;\n                    }\n                }\n                \n                // Simple instruction execution\n                if (instruction === 0x76) { // HALT\n                    break;\n                } else if (instruction === 0xC9) { // RET\n                    break;\n                } else if (instruction === 0xC3) { // JP nn\n                    const low = this.machine.read(pc + 1);\n                    const high = this.machine.read(pc + 2);\n                    const addr = (high << 8) | low;\n                    const newState = this.machine.cpu.saveState();\n                    newState.PC = addr;\n                    this.machine.cpu.loadState(newState);\n                    cycles += 10;\n                    continue;\n                } else {\n                    // For now, just advance PC\n                    const newState = this.machine.cpu.saveState();\n                    newState.PC = pc + 1;\n                    this.machine.cpu.loadState(newState);\n                }\n                \n                cycles++;\n            }\n            \n            if (cycles >= maxCycles) {\n                addOutput('Program execution timed out (infinite loop protection).');\n            } else {\n                addOutput('Program execution completed.');\n            }\n            \n        } catch (error) {\n            addOutput(`Execution failed: ${error.message}`, '#f00');\n        }\n    }\n\n    private executeLoad(parts: string[], addOutput: (text: string, color?: string) => void) {\n        if (parts.length < 2) {\n            addOutput('Usage: LOAD <filename>');\n            return;\n        }\n\n        const filename = parts[1].toUpperCase();\n        if (this.files[filename]) {\n            addOutput(`Loading ${filename} into memory...`);\n            addOutput('Program loaded successfully.');\n            addOutput('Use RESET command to initialize CPU, then RUN to execute.');\n        } else {\n            addOutput(`File not found: ${filename}`);\n            addOutput('Use ASM command to compile source files first.');\n        }\n    }\n\n    private executeMem(addOutput: (text: string, color?: string) => void) {\n        addOutput('MSX Memory Map:');\n        addOutput('  0000-3FFF: BIOS ROM (16KB)');\n        addOutput('  4000-7FFF: Cartridge ROM (16KB)');\n        addOutput('  8000-BFFF: RAM (16KB)');\n        addOutput('  C000-FFFF: RAM (16KB)');\n        addOutput('');\n        addOutput('Total RAM: 32KB');\n    }\n\n    private executeReg(addOutput: (text: string, color?: string) => void) {\n        if (this.machine && this.machine.cpu) {\n            const cpu = this.machine.cpu;\n            const state = cpu.saveState();\n            addOutput('Z80 CPU Registers:');\n            addOutput(`  PC: ${state.PC.toString(16).padStart(4, '0').toUpperCase()}H`);\n            addOutput(`  SP: ${state.SP.toString(16).padStart(4, '0').toUpperCase()}H`);\n            addOutput(`  AF: ${state.AF.toString(16).padStart(4, '0').toUpperCase()}H`);\n            addOutput(`  BC: ${state.BC.toString(16).padStart(4, '0').toUpperCase()}H`);\n            addOutput(`  DE: ${state.DE.toString(16).padStart(4, '0').toUpperCase()}H`);\n            addOutput(`  HL: ${state.HL.toString(16).padStart(4, '0').toUpperCase()}H`);\n        } else {\n            addOutput('CPU not initialized - use RESET command to initialize');\n        }\n    }\n\n    private executeReset(addOutput: (text: string, color?: string) => void) {\n        try {\n            // Re-initialize the machine if needed\n            if (!this.machine) {\n                this.initializeMachine();\n            }\n            \n            if (this.machine) {\n                this.machine.reset();\n                addOutput('CPU reset completed.');\n                addOutput('Machine ready for program execution.');\n            } else {\n                addOutput('Failed to initialize machine.');\n            }\n        } catch (error) {\n            addOutput(`CPU reset failed: ${error.message}`, '#f00');\n        }\n    }\n\n    private handleMSXBIOSCall(addr: number, addOutput: (text: string, color?: string) => void): boolean {\n        const state = this.machine.cpu.saveState();\n        \n        switch (addr) {\n            case 0x00C3: // CLS - Clear screen\n                // Clear the terminal output (we can't actually clear the terminal, but we can add a separator)\n                addOutput('--- Program Output ---');\n                return true;\n                \n            case 0x00C6: // POSIT - Position cursor\n                // Get row from A register, column from H register\n                const row = state.A & 0xFF;\n                const col = state.H & 0xFF;\n                // We can't actually position the cursor, but we can note it\n                // addOutput(`[Cursor: ${row},${col}]`);\n                return true;\n                \n            case 0x00A2: // CHPUT - Character output\n                // Get character from A register\n                const char = state.A & 0xFF;\n                if (char >= 32 && char <= 126) { // Printable ASCII\n                    addOutput(String.fromCharCode(char), '#0f0');\n                } else if (char === 13) { // Carriage return\n                    // addOutput('\\\\r');\n                } else if (char === 10) { // Line feed\n                    // addOutput('\\\\n');\n                } else {\n                    addOutput(`[${char.toString(16).padStart(2, '0')}]`, '#888');\n                }\n                return true;\n                \n            case 0x009F: // CHGET - Character input\n                // For now, just return a dummy character (space)\n                const newState = this.machine.cpu.saveState();\n                newState.A = 32; // Space character\n                this.machine.cpu.loadState(newState);\n                return true;\n                \n            default:\n                // Not a handled BIOS call\n                return false;\n        }\n    }\n\n    loadROM(title: string, data: Uint8Array) {\n        // Override loadROM to prevent automatic reset\n        console.log(`MSX-Shell: ROM loaded - ${title}, ${data.length} bytes`);\n        // Don't call super.loadROM() to avoid automatic reset\n        // The user can manually reset if needed using the RESET command\n    }\n\n    reset() {\n        if (this.machine) {\n            try {\n                this.machine.reset();\n            } catch (error) {\n                console.log('MSX machine reset failed:', error);\n            }\n        }\n    }\n\n    pause() {\n        if (this.timer) {\n            this.timer.stop();\n        }\n    }\n\n    resume() {\n        if (this.timer) {\n            this.timer.start();\n        }\n    }\n\n    isRunning() {\n        return this.timer ? this.timer.running : false;\n    }\n\n    showHelp() {\n        return \"https://retrogamecoders.com/docs/platforms/msx-shell/\";\n    }\n}\n\nPLATFORMS['msx-shell'] = MSXShellPlatform;\n"],
  "mappings": "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",
  "names": []
}
