{
  "version": 3,
  "sources": ["../src/platform/AcornDFSdisc.ts", "../src/platform/bbc.ts"],
  "sourcesContent": ["export class AcornDFSdisc {\n    tracks: number;\n    files: number;\n    image: Uint8Array;\n    nextSector: number;\n\n    constructor() {\n        this.tracks = 80;\n        this.files = 0;\n        this.image = new Uint8Array(this.tracks * 10 * 256);\n        this.nextSector = 2;\n\n        // Add write method to the image\n        (this.image as any).write = function (address: number, d: any, l?: number) {\n            if (l) {\n                for (let b = 0; b < l; b++) {\n                    this.set([d & 0xff], address + b);\n                    d >>= 8;\n                }\n            } else {\n                for (let a = 0; a < d.length; a++) {\n                    let c = typeof d === \"string\" ? d.charCodeAt(a) & 0xff : d[a] & 0xff;\n                    this.set([c], address + a);\n                }\n            }\n        };\n\n        // Apply Acorn DFS format catalog\n        (this.image as any).write(0x0000, \"RETRO\"); // DFS volume title (8 chars)\n        (this.image as any).write(0x0100, \"IDE\\0\");\n        (this.image as any).write(0x0104, 0, 1); // BCD catalog cycle number\n        (this.image as any).write(0x0105, 0, 1); // Number of files << 3\n        (this.image as any).write(0x0106, 0b00110000, 1); // *EXEC boot\n        (this.image as any).write(0x0107, 0x2003, 2); // Number of sectors in volume 0x0320\n    }\n\n    // Save a file to the disc image\n    save(name: string, fileData: string | Uint8Array, loadAdd: number, execAdd: number) {\n        // Shift existing catalog up 8 bytes to make room for new entry\n        let catalogS0 = this.image.slice(0x008, 0x008 + 8 * 30);\n        let catalogS1 = this.image.slice(0x108, 0x108 + 8 * 30);\n        (this.image as any).write(0x010, catalogS0);\n        (this.image as any).write(0x110, catalogS1);\n\n        // Insert latest catalog entry at the beginning\n        (this.image as any).write(0x0008, \"       $\");\n        (this.image as any).write(0x0008, name);\n        (this.image as any).write(0x0108, loadAdd, 2); // Load address\n        (this.image as any).write(0x010a, execAdd, 2); // Exec address\n        (this.image as any).write(0x010c, fileData.length, 2); // Length\n\n        let extra = 0;\n        extra |= ((execAdd & 0xffff0000) === (0xffff0000 | 0) ? 3 : 0) << 6;\n        extra |= ((fileData.length >> 16) & 3) << 4;\n        extra |= ((loadAdd & 0xffff0000) === (0xffff0000 | 0) ? 3 : 0) << 2;\n        extra |= ((this.nextSector >> 8) & 3) << 0;\n        (this.image as any).write(0x010e, extra, 1);\n\n        (this.image as any).write(0x010f, this.nextSector, 1); // Start sector\n\n        // Write data\n        (this.image as any).write(this.nextSector * 0x100, fileData); // Write file data\n\n        // Update disc status\n        this.files++;\n        this.nextSector = this.nextSector + Math.ceil(fileData.length / 256);\n        (this.image as any).write(0x0105, this.files << 3, 1); // Number of files << 3\n    }\n}\n", "import { Platform } from '../common/baseplatform';\nimport { BBCMicroMachine } from '../machine/bbc';\nimport { PLATFORMS } from '../common/emu';\nimport { AcornDFSdisc } from './AcornDFSdisc';\n\nexport class BBCMicroPlatform implements Platform {\n  private machine: BBCMicroMachine | null = null;\n  private mainElement: HTMLElement;\n  private currentSSDBlob: Blob | null = null;\n  private resetSupported = false;\n  private pauseResumeSupported = false;\n\n  constructor(mainElement: HTMLElement) {\n    this.mainElement = mainElement;\n    \n    // Listen for SSD blob messages from the iframe\n    window.addEventListener('message', (event) => {\n      if (event.data && event.data.type === 'ssd_blob_ready') {\n        console.log(\"BBCMicroPlatform: Received SSD blob from iframe\");\n        this.setSSDBlob(event.data.blob);\n      } else if (event.data && event.data.type === 'emulator_capabilities') {\n        console.log(\"BBCMicroPlatform: Received emulator capabilities:\", event.data.capabilities);\n        \n        if (event.data.capabilities && typeof event.data.capabilities.reset === 'boolean') {\n          this.resetSupported = event.data.capabilities.reset;\n        }\n        if (event.data.capabilities && typeof event.data.capabilities.pause === 'boolean') {\n          this.pauseResumeSupported = event.data.capabilities.pause;\n        }\n        \n        console.log(\"BBCMicroPlatform: Updated capabilities - Reset:\", this.resetSupported, \"Pause/Resume:\", this.pauseResumeSupported);\n        \n        // Update button visibility based on capabilities\n        this.updateControlButtons();\n      }\n    });\n  }\n\n  getName(): string {\n    return 'BBC Micro';\n  }\n\n  getDescription(): string {\n    return 'BBC Micro (Model B) - 6502-based home computer from Acorn';\n  }\n\n  async init(): Promise<void> {\n    console.log(\"BBCMicroPlatform init() called\");\n    // BBC Micro doesn't need special initialization like some platforms\n  }\n\n  start(): void {\n    console.log(\"BBCMicroPlatform start() called\");\n    \n    // Initially hide control buttons until we know capabilities\n    this.updateControlButtons();\n    \n    // Create iframe for BBC Micro emulator\n    const iframe = document.createElement('iframe');\n    iframe.id = 'bbc-iframe';\n    iframe.style.width = '100%';\n    iframe.style.height = '600px';\n    iframe.style.border = '1px solid #ccc';\n    iframe.style.backgroundColor = '#000';\n    \n    // Add iframe to the main element\n    this.mainElement.innerHTML = '';\n    this.mainElement.appendChild(iframe);\n    console.log(\"BBCMicroPlatform: iframe created\");\n    \n    // Set up iframe with auto-compilation (will check for worker availability)\n    this.setupIframeWithAutoCompilation().catch(error => {\n      console.error(\"BBCMicroPlatform: Error in setupIframeWithAutoCompilation:\", error);\n    });\n  }\n\n  stop(): void {\n    console.log(\"BBCMicroPlatform stop() called\");\n    if (this.machine) {\n      this.machine.stop();\n    }\n  }\n\n  reset(): void {\n    console.log(\"BBCMicroPlatform reset() called\");\n    \n    // Send reset command to iframe emulator\n    const frame = document.getElementById(\"bbc-iframe\") as HTMLIFrameElement;\n    if (frame && frame.contentWindow) {\n      frame.contentWindow.postMessage({ type: 'reset' }, '*');\n      console.log(\"BBCMicroPlatform: Sent reset command to iframe\");\n    }\n    \n    // Also reset the local machine for consistency\n    if (this.machine) {\n      this.machine.reset();\n    }\n  }\n\n  isRunning(): boolean {\n    return this.machine ? this.machine.running : false;\n  }\n\n  getToolForFilename(filename: string): string {\n    // BBC Micro uses cc65 for C compilation\n    const lowerFilename = filename.toLowerCase();\n    if (lowerFilename.endsWith('.bas')) return 'bbcbasic';\n    if (lowerFilename.endsWith('.c')) return 'cc65';\n    if (lowerFilename.endsWith('.asm') || lowerFilename.endsWith('.s')) return 'ca65';\n    if (lowerFilename.endsWith('.dasm')) return 'dasm';\n    return 'cc65'; // default\n  }\n\n  getDefaultExtension(): string {\n    return '.c';\n  }\n\n      getPresets(): any[] {\n        return [\n            { id: 'bbc_hello.bas', name: 'Hello World (BASIC)' },\n            { id: 'bbc_font.bas', name: 'Custom Font (BASIC)' },\n            { id: 'bbc_labels.bas', name: 'Labels and Subroutines (BASIC)' },\n            { id: 'bbc_input.bas', name: 'Keyboard Input and Movement (BASIC)' },\n            { id: 'bbc_textformat.bas', name: 'Text Formatting (BASIC)' },\n            { id: 'bbc_drop_shadows.bas', name: 'Drop Shadows (BASIC)' },\n            { id: 'mode7_blocks.bas', name: 'Mode 7 Blocks (BASIC)' },\n            { id: 'bbc_big_text.bas', name: 'Big Text (BASIC)' },\n            { id: 'bbc_startrek.bas', name: 'Star Trek (BASIC)' },\n            { id: 'cosmic.bas', name: 'Cosmic Invaders (BASIC)' },\n            { id: 'bbc_hello.c', name: 'Hello World', category: 'C' },\n            { id: 'bbc_os_test.c', name: 'Inline Assembly' },\n        ];\n    }\n\n  pause(): void {\n    if (!this.pauseResumeSupported) {\n      console.log(\"BBCMicroPlatform: Pause not supported by emulator\");\n      return;\n    }\n    \n    console.log(\"BBCMicroPlatform pause() called\");\n    \n    // Send pause command to iframe emulator\n    const frame = document.getElementById(\"bbc-iframe\") as HTMLIFrameElement;\n    if (frame && frame.contentWindow) {\n      frame.contentWindow.postMessage({ type: 'pause' }, '*');\n      console.log(\"BBCMicroPlatform: Sent pause command to iframe\");\n    }\n    \n    // Also pause the local machine for consistency\n    if (this.machine) {\n      this.machine.stop();\n    }\n  }\n\n  resume(): void {\n    if (!this.pauseResumeSupported) {\n      console.log(\"BBCMicroPlatform: Resume not supported by emulator\");\n      return;\n    }\n    \n    console.log(\"BBCMicroPlatform resume() called\");\n    \n    // Send resume command to iframe emulator\n    const frame = document.getElementById(\"bbc-iframe\") as HTMLIFrameElement;\n    if (frame && frame.contentWindow) {\n      frame.contentWindow.postMessage({ type: 'resume' }, '*');\n      console.log(\"BBCMicroPlatform: Sent resume command to iframe\");\n    }\n    \n    // Also resume the local machine for consistency\n    if (this.machine) {\n      this.machine.run();\n    }\n  }\n\n  loadROM(title: string, rom: Uint8Array): void {\n    console.log(\"BBCMicroPlatform loadROM called with title:\", title, \"and\", rom.length, \"bytes\");\n    \n    var frame = document.getElementById(\"bbc-iframe\") as HTMLIFrameElement;\n    if (frame && frame.contentWindow) {\n      // Extract model parameter from main page URL (available for both BASIC and C programs)\n      const mainUrlParams = new URLSearchParams(window.location.search);\n      const modelParam = mainUrlParams.get('model');\n      const modelQuery = modelParam ? `&model=${encodeURIComponent(modelParam)}` : '';\n      \n      // Check if this is BBC BASIC (raw text) or compiled C code\n      const isBasicProgram = this.isBasicProgram(rom);\n      \n      if (isBasicProgram) {\n        console.log(\"BBCMicroPlatform: BBC BASIC program detected\");\n        \n        // Convert bytes back to text for BASIC programs\n        const basicText = new TextDecoder().decode(rom);\n        const encodedBasic = encodeURIComponent(basicText);\n        \n        // Check if the URL would be too long (limit to ~1500 chars to be safe)\n        const iframeURL = `bbc-iframe.html?embedBasic=${encodedBasic}&t=${Date.now()}${modelQuery}`;\n        \n        if (iframeURL.length > 1500) {\n          console.log(\"BBCMicroPlatform: BASIC program too long for URL, saving to PHP server and using loadBasic\");\n          // For long programs, save to PHP server and use loadBasic URL parameter\n          this.saveFileToServerAndLoad(basicText, frame, modelQuery);\n        } else {\n          console.log(\"BBCMicroPlatform: Using embedBasic parameter for short BASIC program\");\n          frame.src = iframeURL;\n        }\n        \n        console.log(\"BBCMicroPlatform: Loading iframe with BASIC program, URL length:\", iframeURL.length);\n      } else if (rom.length > 0) { // Compiled C program\n        console.log(\"BBCMicroPlatform: Compiled C program detected, using postMessage\");\n        \n        // Load the iframe with just the base URL (including model parameter)\n        const baseURL = `bbc-iframe.html?t=${Date.now()}${modelQuery}`;\n        frame.src = baseURL;\n        \n        // Set up a one-time load event listener\n        const onLoad = () => {\n          console.log(\"BBCMicroPlatform: iframe loaded, sending program via postMessage\");\n          // Send the program data via postMessage\n          frame.contentWindow!.postMessage({\n            type: 'compiled_program',\n            program: rom,\n            autoLoad: true\n          }, '*');\n          frame.removeEventListener('load', onLoad);\n        };\n        frame.addEventListener('load', onLoad);\n      } else {\n        // For small programs, still use URL parameters\n        const bbc_debug = (window as any).bbc_debug;\n        if (bbc_debug && bbc_debug.generateIframeURL) {\n          // Handle async generateIframeURL\n          bbc_debug.generateIframeURL(rom).then((iframeURL: string) => {\n            console.log(\"BBCMicroPlatform: Generated iframe URL:\", iframeURL);\n            \n            if (iframeURL) {\n              const cacheBuster = '&t=' + Date.now();\n              const freshURL = iframeURL + cacheBuster;\n              console.log(\"BBCMicroPlatform: Loading fresh URL with cache buster:\", freshURL);\n              \n              // Set up a one-time load event listener\n              const onLoad = () => {\n                console.log(\"BBCMicroPlatform: iframe loaded, calling checkForProgramInURL\");\n                if ((frame.contentWindow as any).checkForProgramInURL) {\n                  (frame.contentWindow as any).checkForProgramInURL();\n                }\n                frame.removeEventListener('load', onLoad);\n              };\n              frame.addEventListener('load', onLoad);\n              \n              // Set the location (this triggers the load event)\n              frame.contentWindow.location = freshURL;\n            } else {\n              console.error(\"BBCMicroPlatform: generateIframeURL returned null\");\n            }\n          }).catch((error: any) => {\n            console.error(\"BBCMicroPlatform: Error generating iframe URL:\", error);\n          });\n        } else {\n          console.error(\"BBCMicroPlatform: bbc_debug not available\");\n        }\n      }\n    } else {\n      console.error(\"BBCMicroPlatform: iframe not found or contentWindow not available\");\n    }\n    \n    // BBC platform uses iframe approach, no machine object needed\n  }\n\n  private async setupIframeWithAutoCompilation() {\n    console.log(\"BBCMicroPlatform: Setting up iframe with auto-compilation\");\n    \n    // Check if we have a compiled program\n    const output = (window as any).IDE?.getCurrentOutput();\n    if (output && output instanceof Uint8Array) {\n      console.log(\"BBCMicroPlatform: Found compiled program, loading iframe\");\n      this.loadROM(\"compiled_program\", output);\n    } else {\n      console.log(\"BBCMicroPlatform: No compiled program found, triggering compilation\");\n      await this.triggerCompilationAndReload();\n    }\n  }\n\n\n  private async saveFileToServerAndLoad(basicText: string, frame: HTMLIFrameElement, modelQuery: string) {\n    // Generate a unique session ID for this file\n    const sessionID = 'user_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n    const filename = 'program.bas';\n    \n    try {\n      \n      // Save the file to the PHP server\n      const formData = new FormData();\n      formData.append('content', basicText);\n      formData.append('session', sessionID);\n      formData.append('file', filename);\n      \n      const response = await fetch('https://ide.retrogamecoders.com/savefile.php', {\n        method: 'POST',\n        body: formData\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to save file to server: ' + response.statusText);\n      }\n      \n      console.log(\"BBCMicroPlatform: File saved to PHP server, using loadBasic URL\");\n      \n      // Create the loadBasic URL using the PHP endpoint\n      const loadBasicURL = `https://ide.retrogamecoders.com/userfile.php?session=${encodeURIComponent(sessionID)}&file=${encodeURIComponent(filename)}`;\n      const iframeURL = `bbc-iframe.html?autorun&loadBasic=${encodeURIComponent(loadBasicURL)}&t=${Date.now()}${modelQuery}`;\n      \n      frame.src = iframeURL;\n      \n    } catch (error) {\n      console.error(\"BBCMicroPlatform: Failed to save file to PHP server\");\n      console.error(\"BBCMicroPlatform: Error details:\", error);\n      console.error(\"BBCMicroPlatform: HTTP URL:\", 'https://ide.retrogamecoders.com/savefile.php');\n      console.error(\"BBCMicroPlatform: Request parameters:\");\n      console.error(\"  - content length:\", basicText.length, \"characters\");\n      console.error(\"  - session:\", sessionID);\n      console.error(\"  - file:\", filename);\n      console.error(\"BBCMicroPlatform: Please check PHP endpoint configuration and server logs\");\n      \n      // Don't fall back to postMessage - just fail and let user know\n      throw new Error(`Failed to save BASIC program to PHP server: ${error}`);\n    }\n  }\n\n  private async triggerCompilationAndReload() {\n    console.log(\"BBCMicroPlatform: Triggering compilation and reload\");\n    \n    // Set up a one-time compilation listener\n    this.setupCompilationListener();\n    \n    // Check for worker availability with retry\n    const checkWorkerAndCompile = () => {\n      const worker = (window as any).worker;\n      if (worker && worker.postMessage) {\n        console.log(\"BBCMicroPlatform: Triggering compilation via worker\");\n        \n        // Get current project files\n        const project = (window as any).IDE?.getCurrentProject();\n        const files = project?.getFiles() || {};\n        \n        // Check if we have any files to compile\n        const fileKeys = Object.keys(files);\n        if (fileKeys.length === 0) {\n          console.log(\"BBCMicroPlatform: No files to compile, skipping worker message\");\n          return;\n        }\n        \n        // Create proper worker message format\n        const mainFile = fileKeys[0];\n        const message = {\n          updates: Object.entries(files).map(([path, data]) => ({\n            path: path,\n            data: typeof data === 'string' ? data : new TextDecoder().decode(data as Uint8Array)\n          })),\n          buildsteps: [{\n            path: mainFile,\n            files: [mainFile],\n            platform: 'bbc',\n            tool: 'bbcbasic',\n            mainfile: true\n          }]\n        };\n        worker.postMessage(message);\n      } else {\n        console.log(\"BBCMicroPlatform: Worker not yet available, retrying in 500ms\");\n        setTimeout(checkWorkerAndCompile, 500);\n      }\n    };\n    \n    checkWorkerAndCompile();\n  }\n\n  private setupCompilationListener() {\n    console.log(\"BBCMicroPlatform: Setting up compilation listener\");\n    \n    // Hook into the global setCompileOutput function to detect successful compilations\n    const originalSetCompileOutput = (window as any).setCompileOutput;\n    (window as any).setCompileOutput = (output: any) => {\n      // Call the original function\n      if (originalSetCompileOutput) {\n        originalSetCompileOutput(output);\n      }\n      \n      // If we have output, reload the iframe with the new program\n      if (output && output instanceof Uint8Array) {\n        console.log(\"BBCMicroPlatform: Compilation completed, reloading iframe with new program\");\n        \n        // Wait a bit for the compilation output to be processed, then use loadROM\n        setTimeout(() => {\n          this.loadROM(\"compiled_program\", output);\n        }, 1000);\n      }\n    };\n  }\n\n  getDownloadFile(): {extension: string, blob: Blob} | undefined {\n    // Check if we have a BASIC program to create an SSD for\n    const output = (window as any).IDE?.getCurrentOutput();\n    if (output && output instanceof Uint8Array && this.isBasicProgram(output)) {\n      console.log(\"BBCMicroPlatform: Creating SSD disk image for BASIC program\");\n      return this.createSSDForBasicProgram(output);\n    }\n    \n    // Fall back to existing SSD blob if available\n    if (this.currentSSDBlob) {\n      return {\n        extension: '.ssd',\n        blob: this.currentSSDBlob\n      };\n    }\n    return undefined;\n  }\n\n  setSSDBlob(blob: Blob): void {\n    this.currentSSDBlob = blob;\n  }\n\n  private createSSDForBasicProgram(basicOutput: Uint8Array): {extension: string, blob: Blob} {\n    // Convert the BASIC text to a format suitable for BBC Micro disk\n    const basicText = new TextDecoder().decode(basicOutput);\n    \n    // Get the current filename or use a default\n    const currentFile = (window as any).IDE?.getCurrentMainFilename() || 'PROGRAM';\n    const filename = currentFile.replace(/\\.(bas|BAS)$/, '').toUpperCase().substring(0, 7); // Max 7 chars for DFS\n    \n    // Try to extract tokenized BASIC from emulator memory first\n    const extracted = this.extractTokenizedBasicFromEmulator();\n    if (extracted && extracted.data && extracted.data.length > 0) {\n      console.log('BBCMicroPlatform: Using tokenized BASIC from emulator memory');\n      const ssdData = this.createProperSSDWithTokenizedBasic(extracted.data, filename, extracted.page);\n      return {\n        extension: '.ssd',\n        blob: new Blob([ssdData.buffer as ArrayBuffer], { type: 'application/octet-stream' })\n      };\n    }\n    \n    // If we cannot read tokenized BASIC from emulator memory, don't emit a disk\n    console.error('BBCMicroPlatform: No tokenized BASIC found in emulator memory; refusing to create SSD to avoid Bad program');\n    return undefined as any;\n  }\n\n  private extractTokenizedBasicFromEmulator(): { data: Uint8Array, page: number } | null {\n    try {\n      // Access the jsbeeb emulator through the iframe\n      const iframe = document.querySelector('iframe');\n      if (!iframe || !iframe.contentWindow) {\n        console.log('BBCMicroPlatform: No iframe found');\n        return null;\n      }\n      \n      const jsbeebWindow = iframe.contentWindow as any;\n      \n      // Log all available objects to understand the jsbeeb structure\n      console.log('BBCMicroPlatform: All jsbeeb window objects:', Object.keys(jsbeebWindow));\n      \n      // Check for processor with multiple possible names\n      let processor = jsbeebWindow.processor || jsbeebWindow.cpu || jsbeebWindow.emulator;\n      if (!processor) {\n        console.log('BBCMicroPlatform: No processor found in jsbeeb (tried processor, cpu, emulator)');\n        console.log('BBCMicroPlatform: Available objects:', Object.keys(jsbeebWindow).filter(k => k.includes('proc') || k.includes('cpu') || k.includes('emu')));\n        \n        // Try to access through document or other global objects\n        if (jsbeebWindow.document) {\n          console.log('BBCMicroPlatform: Document found, checking for global objects');\n          const globalObjects = Object.keys(jsbeebWindow.document.defaultView || {});\n          console.log('BBCMicroPlatform: Global objects:', globalObjects.filter(k => k.includes('proc') || k.includes('cpu') || k.includes('emu')));\n        }\n        \n        // Try to find processor in nested objects\n        for (const key of Object.keys(jsbeebWindow)) {\n          const obj = jsbeebWindow[key];\n          if (obj && typeof obj === 'object') {\n            if (obj.processor || obj.cpu || obj.emulator) {\n              console.log(`BBCMicroPlatform: Found processor in ${key}:`, Object.keys(obj));\n              processor = obj.processor || obj.cpu || obj.emulator;\n              break;\n            }\n            // Check for readmem function which indicates a processor\n            if (typeof obj.readmem === 'function') {\n              console.log(`BBCMicroPlatform: Found readmem function in ${key}`);\n              processor = obj;\n              break;\n            }\n          }\n        }\n        \n        if (!processor) {\n          console.log('BBCMicroPlatform: Still no processor found after deep search');\n          return null;\n        }\n      }\n      \n      // Read the BASIC program from memory\n      // The program starts at PAGE; jsbeeb exposes &18/&19 but order differs.\n      // Read raw bytes then construct an aligned 256-byte page address.\n      const rawPageLo = processor.readmem(0x18);\n      const rawPageHi = processor.readmem(0x19);\n      // Some builds return bytes reversed; build address as hi:lo then align to page boundary (..00)\n      let page = ((rawPageLo << 8) | rawPageHi) & 0xFF00; // yields 0x1900 for default 0x19/0x00\n      if (page === 0 || page > 0xFE00) {\n        // Try swapped order as fallback\n        page = ((rawPageHi << 8) | rawPageLo) & 0xFF00;\n      }\n      if (page === 0) page = 0x1900; // final safety default\n      // Program end is at VARTOP (0x12 low / 0x13 high)\n      const top = (processor.readmem(0x12) | (processor.readmem(0x13) << 8));\n      console.log(`BBCMicroPlatform: Memory page: 0x${page.toString(16)}, top: 0x${top.toString(16)}`);\n      \n      if (!page || !top) {\n        console.log('BBCMicroPlatform: No BASIC program in memory');\n        return null;\n      }\n      \n      const programLength = top - page;\n      console.log(`BBCMicroPlatform: Program length: ${programLength} bytes`);\n      if (programLength <= 0 || programLength > 65535) {\n        console.log('BBCMicroPlatform: Invalid program length:', programLength);\n        return null;\n      }\n      \n      // Extract the tokenized BASIC program\n      const tokenizedBasic = new Uint8Array(programLength);\n      for (let i = 0; i < programLength; i++) {\n        tokenizedBasic[i] = processor.readmem(page + i);\n      }\n      \n    console.log(`BBCMicroPlatform: Extracted ${programLength} bytes of tokenized BASIC from emulator memory`);\n    console.log('BBCMicroPlatform: First 20 bytes of extracted BASIC:', Array.from(tokenizedBasic.slice(0, 20)).map(b => b.toString(16).padStart(2, '0')).join(' '));\n    console.log('BBCMicroPlatform: Last 20 bytes of extracted BASIC:', Array.from(tokenizedBasic.slice(-20)).map(b => b.toString(16).padStart(2, '0')).join(' '));\n    return { data: tokenizedBasic, page };\n      \n    } catch (error) {\n      console.log('BBCMicroPlatform: Error extracting tokenized BASIC:', error);\n      return null;\n    }\n  }\n\n  private createProperSSDWithTokenizedBasic(tokenizedBasic: Uint8Array, filename: string, loadExecAddress: number): Uint8Array {\n    // Use the exact same AcornDFSdisc class as owlet-editor\n    console.log(`BBCMicroPlatform: Creating SSD with ${tokenizedBasic.length} bytes of tokenized BASIC using AcornDFSdisc`);\n    \n    const disc = new AcornDFSdisc();\n    \n    // Add files in the same order as owlet-editor\n    disc.save(\"README\", \"Created in BBC BASIC\\r\", 0x0000, 0x0000);\n    // Use actual PAGE (load/exec) so BASIC sees a valid program location\n    //    disc.save(\"PROGRAM\", tokenizedBasic, loadExecAddress, loadExecAddress);\n    disc.save(\"PROGRAM\", tokenizedBasic, 0x1900, 0x1900);\n    // Keep SCREEN as a small placeholder with sane addresses\n    disc.save(\"SCREEN\", new Uint8Array(0x50), 0x3000, 0x0000);\n    disc.save(\"!BOOT\", 'CHAIN\"PROGRAM\"\\r', 0x1900, 0x1900);\n    \n    return disc.image;\n  }\n  private createProperSSD(basicText: string, filename: string): Uint8Array {\n    // Kept for reference; prefer tokenizeBasicToMemoryImage above\n    const basicBytes = this.tokenizeBasicToMemoryImage(basicText, 0x1900);\n    console.log(`BBCMicroPlatform: Tokenized ${basicText.length} chars to ${basicBytes.length} bytes (memory image)`);\n    console.log(`BBCMicroPlatform: First 20 bytes:`, Array.from(basicBytes.slice(0, 20)).map(b => '0x' + b.toString(16).padStart(2, '0')).join(' '));\n    \n    // Create a 200KB disk image (80 tracks * 10 sectors * 256 bytes)\n    const diskSize = 80 * 10 * 256;\n    const disk = new Uint8Array(diskSize);\n    \n    // Initialize with zeros\n    disk.fill(0);\n    \n    // Helper function to write data to disk (similar to owlet-editor)\n    const write = (address: number, data: string | number | Uint8Array, length?: number) => {\n      if (typeof data === 'string') {\n        for (let i = 0; i < data.length; i++) {\n          disk[address + i] = data.charCodeAt(i) & 0xff;\n        }\n      } else if (typeof data === 'number') {\n        for (let b = 0; b < (length || 1); b++) {\n          disk[address + b] = (data >> (b * 8)) & 0xff;\n        }\n      } else if (data instanceof Uint8Array) {\n        for (let i = 0; i < data.length; i++) {\n          disk[address + i] = data[i];\n        }\n      }\n    };\n    \n    // Apply Acorn DFS format catalog (following owlet-editor exactly)\n    write(0x0000, \"BBCMICRO\"); // DFS volume title\n    \n    // File entries (following owlet-editor pattern exactly)\n    write(0x0008, \"!BOOT  $\"); // Boot file\n    write(0x0010, \"SCREEN $\"); // Screen file  \n    write(0x0018, \"PROGRAM$\"); // Program file (this is what we want to load)\n    write(0x0020, \"README $\"); // Readme file\n    \n    // Catalog data at 0x0100\n    write(0x0100, \"BOT\\0\");\n    write(0x0104, 0, 1); // BCD catalog cycle number\n    write(0x0105, 0x20, 1); // Number of files << 3 (4 files = 32 = 0x20)\n    write(0x0106, 0b00110000, 1); // *EXEC boot\n    write(0x0107, 0x2003, 2); // Number of sectors in volume 0x0320\n    \n    // File catalog entries (following owlet-editor structure)\n    // !BOOT file entry\n    write(0x0108, 0x1900, 2); // Load address\n    write(0x010a, 0x1900, 2); // Exec address  \n    write(0x010c, 0x0f, 2); // File length (15 bytes)\n    write(0x010e, 0x00, 1); // Extra info\n    write(0x010f, 0x02, 1); // Start sector\n    \n    // SCREEN file entry\n    write(0x0110, 0x3000, 2); // Load address\n    write(0x0112, 0x0000, 2); // Exec address\n    write(0x0114, 0x50, 2); // File length (80 bytes)\n    write(0x0116, 0x0c, 1); // Extra info\n    write(0x0117, 0x03, 1); // Start sector\n    \n    // PROGRAM file entry (our BASIC program)\n    write(0x0118, 0x1900, 2); // Load address\n    write(0x011a, 0x1900, 2); // Exec address\n    write(0x011c, basicBytes.length, 2); // File length\n    write(0x011e, 0x04, 1); // Extra info\n    write(0x011f, 0x05, 1); // Start sector (sector 5)\n    \n    // README file entry\n    write(0x0120, 0x0000, 2); // Load address\n    write(0x0122, 0x0000, 2); // Exec address\n    write(0x0124, 0x23, 2); // File length (35 bytes)\n    write(0x0126, 0x00, 1); // Extra info\n    write(0x0127, 0x06, 1); // Start sector\n    \n    // Write file data\n    // !BOOT file (sector 2)\n    write(0x0200, \"CHAIN\\\"PROGRAM\\\"\\r\");\n    \n    // SCREEN file (sector 3-4) - screen data\n    const screenData = new Uint8Array(0x50);\n    screenData.fill(0x14); // Fill with a pattern\n    write(0x0300, screenData);\n    \n    // PROGRAM file (sector 5) - our BASIC program\n    write(0x0500, basicBytes);\n    \n    // README file (sector 6)\n    write(0x0600, \"Created by 8bitworkshop\\r\");\n    \n    console.log(`BBCMicroPlatform: Created proper SSD with ${basicBytes.length} bytes of BASIC program as ${filename}`);\n    \n    return disk;\n  }\n\n  private tokenizeBasicToMemoryImage(basicText: string, loadAddress: number): Uint8Array {\n    // Build a valid BBC BASIC in-memory image: [linkLo linkHi lineLo lineHi bytes... 0x00] ... last line has link=0x0000\n    const lines = basicText.split('\\n').map(l => l.replace(/\\r$/, '')).filter(l => l.trim().length > 0);\n    type LineRec = { lineNumber: number, data: Uint8Array };\n    const parsed: LineRec[] = [];\n    for (const raw of lines) {\n      const m = raw.match(/^(\\d+)\\s+(.*)$/);\n      if (!m) continue; // skip non-numbered lines\n      const ln = Math.max(0, Math.min(65535, parseInt(m[1], 10)));\n      const content = m[2];\n      const tokenBytes = this.tokenizeContent(content);\n      // Append 0x00 terminator for the line body\n      const body = new Uint8Array(tokenBytes.length + 1);\n      body.set(tokenBytes, 0); body[tokenBytes.length] = 0x00;\n      parsed.push({ lineNumber: ln, data: body });\n    }\n    // Compute total size: for each line 2 bytes link + 2 bytes number + body length\n    const total = parsed.reduce((s, r) => s + 4 + r.data.length, 0);\n    const out = new Uint8Array(total);\n    let offset = 0;\n    for (let i = 0; i < parsed.length; i++) {\n      const nextAddr = i < parsed.length - 1 ? (loadAddress + (offset + 4 + parsed[i].data.length)) : 0;\n      // link pointer (little-endian)\n      out[offset + 0] = nextAddr & 0xFF;\n      out[offset + 1] = (nextAddr >> 8) & 0xFF;\n      // line number (little-endian)\n      out[offset + 2] = parsed[i].lineNumber & 0xFF;\n      out[offset + 3] = (parsed[i].lineNumber >> 8) & 0xFF;\n      // body\n      out.set(parsed[i].data, offset + 4);\n      offset += 4 + parsed[i].data.length;\n    }\n    return out;\n  }\n\n  // tokenizeLine is no longer used for disk image; kept for potential UI helpers\n  private tokenizeLine(line: string): Uint8Array {\n    return new Uint8Array(0);\n  }\n\n  private tokenizeContent(content: string): Uint8Array {\n    // Basic keyword tokenization\n    const keywords: { [key: string]: number } = {\n      'REM': 0xF4,\n      'MODE': 0xEB,\n      'COLOUR': 0xFB,\n      'PRINT': 0xF1,\n      'GOTO': 0xE5,\n      'RND': 0xB3,\n      'IF': 0xE7,\n      'THEN': 0x8C,\n      'ELSE': 0x85,\n      'END': 0xE0,\n      'FOR': 0xE3,\n      'NEXT': 0xED,\n      'TO': 0xB8,\n      'STEP': 0x88,\n      'LET': 0xE9,\n      'INPUT': 0xE8,\n      'DATA': 0xDC,\n      'READ': 0xE3,\n      'RESTORE': 0x8B,\n      'GOSUB': 0xE4,\n      'RETURN': 0x8A,\n      'STOP': 0xFA,\n      'RUN': 0xF9,\n      'NEW': 0xCA,\n      'LOAD': 0xC8,\n      'SAVE': 0xCD,\n      'LIST': 0xC9,\n      'CLEAR': 0xD8,\n      'CLS': 0xDB,\n      'CLG': 0xDA,\n      'DRAW': 0xDF,\n      'MOVE': 0xEC,\n      'PLOT': 0xF0,\n      'GCOL': 0xE6,\n      'VDU': 0xEF,\n      'SOUND': 0xD4,\n      'ENVELOPE': 0xE2,\n      'REPEAT': 0xF5,\n      'UNTIL': 0xFD,\n      'WHILE': 0xFE,\n      'ENDWHILE': 0xFF,\n      'PROC': 0xF2,\n      'ENDPROC': 0xE1,\n      'DEF': 0xDD,\n      'FN': 0xA4,\n      'LOCAL': 0xEA,\n      'DIM': 0xDE,\n      'ON': 0xEE,\n      'ERROR': 0x85,\n      'TRACE': 0xFC,\n      'TIME': 0x91,\n      'PAGE': 0x90,\n      'PTR': 0x8F,\n      'LOMEM': 0x92,\n      'HIMEM': 0x93,\n      'ABS': 0x94,\n      'ACS': 0x95,\n      'ADVAL': 0x96,\n      'ASC': 0x97,\n      'ASN': 0x98,\n      'ATN': 0x99,\n      'BGET': 0x9A,\n      'COS': 0x9B,\n      'COUNT': 0x9C,\n      'DEG': 0x9D,\n      'ERL': 0x9E,\n      'ERR': 0x9F,\n      'EVAL': 0xA0,\n      'EXP': 0xA1,\n      'EXT': 0xA2,\n      'FALSE': 0xA3,\n      'GET': 0xA5,\n      'INKEY': 0xA6,\n      'INSTR': 0xA7,\n      'INT': 0xA8,\n      'LEN': 0xA9,\n      'LN': 0xAA,\n      'LOG': 0xAB,\n      'NOT': 0xAC,\n      'OPENIN': 0x8E,\n      'OPENOUT': 0xAE,\n      'OPENUP': 0xAD,\n      'PI': 0xAF,\n      'POINT': 0xB0,\n      'POS': 0xB1,\n      'RAD': 0xB2,\n      'RIGHT$': 0xC2,\n      'SGN': 0xB4,\n      'SIN': 0xB5,\n      'SQR': 0xB6,\n      'STR$': 0xC3,\n      'STRING$': 0xC4,\n      'TAN': 0xB7,\n      'TRUE': 0xB9,\n      'USR': 0xBA,\n      'VAL': 0xBB,\n      'VPOS': 0xBC,\n      'CHR$': 0xBD,\n      'GET$': 0xBE,\n      'INKEY$': 0xBF,\n      'LEFT$': 0xC0,\n      'MID$': 0xC1\n    };\n    \n    const result: number[] = [];\n    let i = 0;\n    \n    while (i < content.length) {\n      let found = false;\n      \n      // Check for keywords (case insensitive)\n      for (const [keyword, token] of Object.entries(keywords)) {\n        if (content.toUpperCase().substring(i, i + keyword.length) === keyword) {\n          // Check if it's a whole word (not part of a longer word)\n          const before = i === 0 ? ' ' : content[i - 1];\n          const after = i + keyword.length >= content.length ? ' ' : content[i + keyword.length];\n          const isWordBoundary = /[^A-Za-z0-9_$%]/.test(before) && /[^A-Za-z0-9_$%]/.test(after);\n          \n          if (isWordBoundary) {\n            // Add space before token if there was one in original\n            if (i > 0 && content[i - 1] === ' ') {\n              result.push(0x20); // Space\n            }\n            result.push(token);\n            // Add space after token if there was one in original\n            if (i + keyword.length < content.length && content[i + keyword.length] === ' ') {\n              result.push(0x20); // Space\n            }\n            i += keyword.length;\n            found = true;\n            break;\n          }\n        }\n      }\n      \n      if (!found) {\n        // Regular character\n        result.push(content.charCodeAt(i));\n        i++;\n      }\n    }\n    \n    return new Uint8Array(result);\n  }\n\n  private isBasicProgram(rom: Uint8Array): boolean {\n    // Check if this looks like BBC BASIC source code\n    // BBC BASIC programs typically start with line numbers and contain BASIC keywords\n    const text = new TextDecoder().decode(rom);\n    \n    // Look for BBC BASIC patterns:\n    // 1. Starts with a line number (digits followed by space)\n    // 2. Contains BBC BASIC keywords\n    const basicKeywords = ['PRINT', 'REM', 'MODE', 'COLOUR', 'GOTO', 'FOR', 'NEXT', 'IF', 'THEN', 'ELSE', 'END', 'STOP', 'RUN', 'NEW', 'LOAD', 'SAVE'];\n    \n    const hasLineNumbers = /^\\d+\\s/.test(text.trim());\n    const hasBasicKeywords = basicKeywords.some(keyword => \n      text.toUpperCase().includes(keyword)\n    );\n    \n    return hasLineNumbers && hasBasicKeywords;\n  }\n\n  private updateControlButtons(): void {\n    // Find the control buttons in the UI and show/hide them based on capability\n    const resetButton = document.getElementById('dbg_reset') as HTMLElement;\n    const pauseButton = document.getElementById('dbg_pause') as HTMLElement;\n    const resumeButton = document.getElementById('dbg_go') as HTMLElement;\n    \n    if (resetButton) {\n      resetButton.style.display = this.resetSupported ? 'inline-block' : 'none';\n      console.log(\"BBCMicroPlatform: Reset button visibility:\", this.resetSupported ? 'visible' : 'hidden');\n    }\n    \n    if (pauseButton) {\n      pauseButton.style.display = this.pauseResumeSupported ? 'inline-block' : 'none';\n      console.log(\"BBCMicroPlatform: Pause button visibility:\", this.pauseResumeSupported ? 'visible' : 'hidden');\n    }\n    \n    if (resumeButton) {\n      resumeButton.style.display = this.pauseResumeSupported ? 'inline-block' : 'none';\n      console.log(\"BBCMicroPlatform: Resume button visibility:\", this.pauseResumeSupported ? 'visible' : 'hidden');\n    }\n  }\n}\n\n// Register the BBC platform\nPLATFORMS['bbc'] = BBCMicroPlatform;\nPLATFORMS['bbc-micro'] = BBCMicroPlatform;\nPLATFORMS['bbc.b'] = BBCMicroPlatform;\nPLATFORMS['bbc.model.b'] = BBCMicroPlatform; "],
  "mappings": "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",
  "names": []
}
