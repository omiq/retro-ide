import{H as f}from"./chunk-KXQZZRQB.js";import"./chunk-WAARL7ET.js";var p=class{constructor(){this.tracks=80,this.files=0,this.image=new Uint8Array(this.tracks*10*256),this.nextSector=2,this.image.write=function(o,t,i){if(i)for(let r=0;r<i;r++)this.set([t&255],o+r),t>>=8;else for(let r=0;r<t.length;r++){let s=typeof t=="string"?t.charCodeAt(r)&255:t[r]&255;this.set([s],o+r)}},this.image.write(0,"RETRO"),this.image.write(256,"IDE\0"),this.image.write(260,0,1),this.image.write(261,0,1),this.image.write(262,48,1),this.image.write(263,8195,2)}save(o,t,i,r){let s=this.image.slice(8,8+8*30),e=this.image.slice(264,264+8*30);this.image.write(16,s),this.image.write(272,e),this.image.write(8,"       $"),this.image.write(8,o),this.image.write(264,i,2),this.image.write(266,r,2),this.image.write(268,t.length,2);let m=0;m|=((r&4294901760)==(4294901760|0)?3:0)<<6,m|=(t.length>>16&3)<<4,m|=((i&4294901760)==(4294901760|0)?3:0)<<2,m|=(this.nextSector>>8&3)<<0,this.image.write(270,m,1),this.image.write(271,this.nextSector,1),this.image.write(this.nextSector*256,t),this.files++,this.nextSector=this.nextSector+Math.ceil(t.length/256),this.image.write(261,this.files<<3,1)}};var g=class{constructor(o){this.machine=null;this.currentSSDBlob=null;this.resetSupported=!1;this.pauseResumeSupported=!1;this.mainElement=o,window.addEventListener("message",t=>{t.data&&t.data.type==="ssd_blob_ready"?(console.log("BBCMicroPlatform: Received SSD blob from iframe"),this.setSSDBlob(t.data.blob)):t.data&&t.data.type==="emulator_capabilities"&&(console.log("BBCMicroPlatform: Received emulator capabilities:",t.data.capabilities),t.data.capabilities&&typeof t.data.capabilities.reset=="boolean"&&(this.resetSupported=t.data.capabilities.reset),t.data.capabilities&&typeof t.data.capabilities.pause=="boolean"&&(this.pauseResumeSupported=t.data.capabilities.pause),console.log("BBCMicroPlatform: Updated capabilities - Reset:",this.resetSupported,"Pause/Resume:",this.pauseResumeSupported),this.updateControlButtons())})}getName(){return"BBC Micro"}getDescription(){return"BBC Micro (Model B) - 6502-based home computer from Acorn"}async init(){console.log("BBCMicroPlatform init() called")}start(){console.log("BBCMicroPlatform start() called"),this.updateControlButtons();let o=document.createElement("iframe");o.id="bbc-iframe",o.style.width="100%",o.style.height="600px",o.style.border="1px solid #ccc",o.style.backgroundColor="#000",this.mainElement.innerHTML="",this.mainElement.appendChild(o),console.log("BBCMicroPlatform: iframe created"),this.setupIframeWithAutoCompilation().catch(t=>{console.error("BBCMicroPlatform: Error in setupIframeWithAutoCompilation:",t)})}stop(){console.log("BBCMicroPlatform stop() called"),this.machine&&this.machine.stop()}reset(){console.log("BBCMicroPlatform reset() called");let o=document.getElementById("bbc-iframe");o&&o.contentWindow&&(o.contentWindow.postMessage({type:"reset"},"*"),console.log("BBCMicroPlatform: Sent reset command to iframe")),this.machine&&this.machine.reset()}isRunning(){return this.machine?this.machine.running:!1}getToolForFilename(o){let t=o.toLowerCase();return t.endsWith(".bas")?"bbcbasic":t.endsWith(".c")?"cc65":t.endsWith(".asm")||t.endsWith(".s")?"ca65":t.endsWith(".dasm")?"dasm":"cc65"}getDefaultExtension(){return".c"}getPresets(){return[{id:"bbc_hello.bas",name:"Hello World (BASIC)"},{id:"bbc_font.bas",name:"Custom UDC Font (BASIC)"},{id:"bbc_labels.bas",name:"Labels and Subroutines (BASIC)"},{id:"bbc_input.bas",name:"Keyboard Input and Movement (BASIC)"},{id:"bbc_textformat.bas",name:"Text Formatting (BASIC)"},{id:"bbc_drop_shadows.bas",name:"Drop Shadows (BASIC)"},{id:"mode7_blocks.bas",name:"Mode 7 Blocks (BASIC)"},{id:"bbc_big_text.bas",name:"Big Text (BASIC)"},{id:"bbc_startrek.bas",name:"Star Trek (BASIC)"},{id:"cosmic.bas",name:"Cosmic Invaders (BASIC)"},{id:"bbc_hello.c",name:"Hello World",category:"C"},{id:"bbc_os_test.c",name:"Inline Assembly"}]}pause(){if(!this.pauseResumeSupported){console.log("BBCMicroPlatform: Pause not supported by emulator");return}console.log("BBCMicroPlatform pause() called");let o=document.getElementById("bbc-iframe");o&&o.contentWindow&&(o.contentWindow.postMessage({type:"pause"},"*"),console.log("BBCMicroPlatform: Sent pause command to iframe")),this.machine&&this.machine.stop()}resume(){if(!this.pauseResumeSupported){console.log("BBCMicroPlatform: Resume not supported by emulator");return}console.log("BBCMicroPlatform resume() called");let o=document.getElementById("bbc-iframe");o&&o.contentWindow&&(o.contentWindow.postMessage({type:"resume"},"*"),console.log("BBCMicroPlatform: Sent resume command to iframe")),this.machine&&this.machine.run()}loadROM(o,t){console.log("BBCMicroPlatform loadROM called with title:",o,"and",t.length,"bytes");var i=document.getElementById("bbc-iframe");if(i&&i.contentWindow){let s=new URLSearchParams(window.location.search).get("model"),e=s?`&model=${encodeURIComponent(s)}`:"";if(this.isBasicProgram(t)){console.log("BBCMicroPlatform: BBC BASIC program detected");let n=new TextDecoder().decode(t),c=`bbc-iframe.html?embedBasic=${encodeURIComponent(n)}&t=${Date.now()}${e}`;c.length>1500?(console.log("BBCMicroPlatform: BASIC program too long for URL, saving to PHP server and using loadBasic"),this.saveFileToServerAndLoad(n,i,e)):(console.log("BBCMicroPlatform: Using embedBasic parameter for short BASIC program"),i.src=c),console.log("BBCMicroPlatform: Loading iframe with BASIC program, URL length:",c.length)}else if(t.length>0){console.log("BBCMicroPlatform: Compiled C program detected, using postMessage");let n=`bbc-iframe.html?t=${Date.now()}${e}`;i.src=n;let a=()=>{console.log("BBCMicroPlatform: iframe loaded, sending program via postMessage"),i.contentWindow.postMessage({type:"compiled_program",program:t,autoLoad:!0},"*"),i.removeEventListener("load",a)};i.addEventListener("load",a)}else{let n=window.bbc_debug;n&&n.generateIframeURL?n.generateIframeURL(t).then(a=>{if(console.log("BBCMicroPlatform: Generated iframe URL:",a),a){let c="&t="+Date.now(),l=a+c;console.log("BBCMicroPlatform: Loading fresh URL with cache buster:",l);let d=()=>{console.log("BBCMicroPlatform: iframe loaded, calling checkForProgramInURL"),i.contentWindow.checkForProgramInURL&&i.contentWindow.checkForProgramInURL(),i.removeEventListener("load",d)};i.addEventListener("load",d),i.contentWindow.location=l}else console.error("BBCMicroPlatform: generateIframeURL returned null")}).catch(a=>{console.error("BBCMicroPlatform: Error generating iframe URL:",a)}):console.error("BBCMicroPlatform: bbc_debug not available")}}else console.error("BBCMicroPlatform: iframe not found or contentWindow not available")}async setupIframeWithAutoCompilation(){var t;console.log("BBCMicroPlatform: Setting up iframe with auto-compilation");let o=(t=window.IDE)==null?void 0:t.getCurrentOutput();o&&o instanceof Uint8Array?(console.log("BBCMicroPlatform: Found compiled program, loading iframe"),this.loadROM("compiled_program",o)):(console.log("BBCMicroPlatform: No compiled program found, triggering compilation"),await this.triggerCompilationAndReload())}async saveFileToServerAndLoad(o,t,i){let r="user_"+Date.now()+"_"+Math.random().toString(36).substr(2,9),s="program.bas";try{let e=new FormData;e.append("content",o),e.append("session",r),e.append("file",s);let m=await fetch("https://ide.retrogamecoders.com/savefile.php",{method:"POST",body:e});if(!m.ok)throw new Error("Failed to save file to server: "+m.statusText);console.log("BBCMicroPlatform: File saved to PHP server, using loadBasic URL");let n=`https://ide.retrogamecoders.com/userfile.php?session=${encodeURIComponent(r)}&file=${encodeURIComponent(s)}`,a=`bbc-iframe.html?autorun&loadBasic=${encodeURIComponent(n)}&t=${Date.now()}${i}`;t.src=a}catch(e){throw console.error("BBCMicroPlatform: Failed to save file to PHP server"),console.error("BBCMicroPlatform: Error details:",e),console.error("BBCMicroPlatform: HTTP URL:","https://ide.retrogamecoders.com/savefile.php"),console.error("BBCMicroPlatform: Request parameters:"),console.error("  - content length:",o.length,"characters"),console.error("  - session:",r),console.error("  - file:",s),console.error("BBCMicroPlatform: Please check PHP endpoint configuration and server logs"),new Error(`Failed to save BASIC program to PHP server: ${e}`)}}async triggerCompilationAndReload(){console.log("BBCMicroPlatform: Triggering compilation and reload"),this.setupCompilationListener();let o=()=>{var i;let t=window.worker;if(t&&t.postMessage){console.log("BBCMicroPlatform: Triggering compilation via worker");let r=(i=window.IDE)==null?void 0:i.getCurrentProject(),s=(r==null?void 0:r.getFiles())||{},e=Object.keys(s);if(e.length===0){console.log("BBCMicroPlatform: No files to compile, skipping worker message");return}let m=e[0],n={updates:Object.entries(s).map(([a,c])=>({path:a,data:typeof c=="string"?c:new TextDecoder().decode(c)})),buildsteps:[{path:m,files:[m],platform:"bbc",tool:"bbcbasic",mainfile:!0}]};t.postMessage(n)}else console.log("BBCMicroPlatform: Worker not yet available, retrying in 500ms"),setTimeout(o,500)};o()}setupCompilationListener(){console.log("BBCMicroPlatform: Setting up compilation listener");let o=window.setCompileOutput;window.setCompileOutput=t=>{o&&o(t),t&&t instanceof Uint8Array&&(console.log("BBCMicroPlatform: Compilation completed, reloading iframe with new program"),setTimeout(()=>{this.loadROM("compiled_program",t)},1e3))}}getDownloadFile(){var t;let o=(t=window.IDE)==null?void 0:t.getCurrentOutput();if(o&&o instanceof Uint8Array&&this.isBasicProgram(o))return console.log("BBCMicroPlatform: Creating SSD disk image for BASIC program"),this.createSSDForBasicProgram(o);if(this.currentSSDBlob)return{extension:".ssd",blob:this.currentSSDBlob}}setSSDBlob(o){this.currentSSDBlob=o}createSSDForBasicProgram(o){var e;let t=new TextDecoder().decode(o),r=(((e=window.IDE)==null?void 0:e.getCurrentMainFilename())||"PROGRAM").replace(/\.(bas|BAS)$/,"").toUpperCase().substring(0,7),s=this.extractTokenizedBasicFromEmulator();if(s&&s.data&&s.data.length>0){console.log("BBCMicroPlatform: Using tokenized BASIC from emulator memory");let m=this.createProperSSDWithTokenizedBasic(s.data,r,s.page);return{extension:".ssd",blob:new Blob([m.buffer],{type:"application/octet-stream"})}}console.error("BBCMicroPlatform: No tokenized BASIC found in emulator memory; refusing to create SSD to avoid Bad program")}extractTokenizedBasicFromEmulator(){try{let o=document.querySelector("iframe");if(!o||!o.contentWindow)return console.log("BBCMicroPlatform: No iframe found"),null;let t=o.contentWindow;console.log("BBCMicroPlatform: All jsbeeb window objects:",Object.keys(t));let i=t.processor||t.cpu||t.emulator;if(!i){if(console.log("BBCMicroPlatform: No processor found in jsbeeb (tried processor, cpu, emulator)"),console.log("BBCMicroPlatform: Available objects:",Object.keys(t).filter(c=>c.includes("proc")||c.includes("cpu")||c.includes("emu"))),t.document){console.log("BBCMicroPlatform: Document found, checking for global objects");let c=Object.keys(t.document.defaultView||{});console.log("BBCMicroPlatform: Global objects:",c.filter(l=>l.includes("proc")||l.includes("cpu")||l.includes("emu")))}for(let c of Object.keys(t)){let l=t[c];if(l&&typeof l=="object"){if(l.processor||l.cpu||l.emulator){console.log(`BBCMicroPlatform: Found processor in ${c}:`,Object.keys(l)),i=l.processor||l.cpu||l.emulator;break}if(typeof l.readmem=="function"){console.log(`BBCMicroPlatform: Found readmem function in ${c}`),i=l;break}}}if(!i)return console.log("BBCMicroPlatform: Still no processor found after deep search"),null}let r=i.readmem(24),s=i.readmem(25),e=(r<<8|s)&65280;(e===0||e>65024)&&(e=(s<<8|r)&65280),e===0&&(e=6400);let m=i.readmem(18)|i.readmem(19)<<8;if(console.log(`BBCMicroPlatform: Memory page: 0x${e.toString(16)}, top: 0x${m.toString(16)}`),!e||!m)return console.log("BBCMicroPlatform: No BASIC program in memory"),null;let n=m-e;if(console.log(`BBCMicroPlatform: Program length: ${n} bytes`),n<=0||n>65535)return console.log("BBCMicroPlatform: Invalid program length:",n),null;let a=new Uint8Array(n);for(let c=0;c<n;c++)a[c]=i.readmem(e+c);return console.log(`BBCMicroPlatform: Extracted ${n} bytes of tokenized BASIC from emulator memory`),console.log("BBCMicroPlatform: First 20 bytes of extracted BASIC:",Array.from(a.slice(0,20)).map(c=>c.toString(16).padStart(2,"0")).join(" ")),console.log("BBCMicroPlatform: Last 20 bytes of extracted BASIC:",Array.from(a.slice(-20)).map(c=>c.toString(16).padStart(2,"0")).join(" ")),{data:a,page:e}}catch(o){return console.log("BBCMicroPlatform: Error extracting tokenized BASIC:",o),null}}createProperSSDWithTokenizedBasic(o,t,i){console.log(`BBCMicroPlatform: Creating SSD with ${o.length} bytes of tokenized BASIC using AcornDFSdisc`);let r=new p;return r.save("README","Created in BBC BASIC\r",0,0),r.save("PROGRAM",o,6400,6400),r.save("SCREEN",new Uint8Array(80),12288,0),r.save("!BOOT",'CHAIN"PROGRAM"\r',6400,6400),r.image}createProperSSD(o,t){let i=this.tokenizeBasicToMemoryImage(o,6400);console.log(`BBCMicroPlatform: Tokenized ${o.length} chars to ${i.length} bytes (memory image)`),console.log("BBCMicroPlatform: First 20 bytes:",Array.from(i.slice(0,20)).map(n=>"0x"+n.toString(16).padStart(2,"0")).join(" "));let r=80*10*256,s=new Uint8Array(r);s.fill(0);let e=(n,a,c)=>{if(typeof a=="string")for(let l=0;l<a.length;l++)s[n+l]=a.charCodeAt(l)&255;else if(typeof a=="number")for(let l=0;l<(c||1);l++)s[n+l]=a>>l*8&255;else if(a instanceof Uint8Array)for(let l=0;l<a.length;l++)s[n+l]=a[l]};e(0,"BBCMICRO"),e(8,"!BOOT  $"),e(16,"SCREEN $"),e(24,"PROGRAM$"),e(32,"README $"),e(256,"BOT\0"),e(260,0,1),e(261,32,1),e(262,48,1),e(263,8195,2),e(264,6400,2),e(266,6400,2),e(268,15,2),e(270,0,1),e(271,2,1),e(272,12288,2),e(274,0,2),e(276,80,2),e(278,12,1),e(279,3,1),e(280,6400,2),e(282,6400,2),e(284,i.length,2),e(286,4,1),e(287,5,1),e(288,0,2),e(290,0,2),e(292,35,2),e(294,0,1),e(295,6,1),e(512,'CHAIN"PROGRAM"\r');let m=new Uint8Array(80);return m.fill(20),e(768,m),e(1280,i),e(1536,"Created by 8bitworkshop\r"),console.log(`BBCMicroPlatform: Created proper SSD with ${i.length} bytes of BASIC program as ${t}`),s}tokenizeBasicToMemoryImage(o,t){let i=o.split(`
`).map(n=>n.replace(/\r$/,"")).filter(n=>n.trim().length>0),r=[];for(let n of i){let a=n.match(/^(\d+)\s+(.*)$/);if(!a)continue;let c=Math.max(0,Math.min(65535,parseInt(a[1],10))),l=a[2],d=this.tokenizeContent(l),u=new Uint8Array(d.length+1);u.set(d,0),u[d.length]=0,r.push({lineNumber:c,data:u})}let s=r.reduce((n,a)=>n+4+a.data.length,0),e=new Uint8Array(s),m=0;for(let n=0;n<r.length;n++){let a=n<r.length-1?t+(m+4+r[n].data.length):0;e[m+0]=a&255,e[m+1]=a>>8&255,e[m+2]=r[n].lineNumber&255,e[m+3]=r[n].lineNumber>>8&255,e.set(r[n].data,m+4),m+=4+r[n].data.length}return e}tokenizeLine(o){return new Uint8Array(0)}tokenizeContent(o){let t={REM:244,MODE:235,COLOUR:251,PRINT:241,GOTO:229,RND:179,IF:231,THEN:140,ELSE:133,END:224,FOR:227,NEXT:237,TO:184,STEP:136,LET:233,INPUT:232,DATA:220,READ:227,RESTORE:139,GOSUB:228,RETURN:138,STOP:250,RUN:249,NEW:202,LOAD:200,SAVE:205,LIST:201,CLEAR:216,CLS:219,CLG:218,DRAW:223,MOVE:236,PLOT:240,GCOL:230,VDU:239,SOUND:212,ENVELOPE:226,REPEAT:245,UNTIL:253,WHILE:254,ENDWHILE:255,PROC:242,ENDPROC:225,DEF:221,FN:164,LOCAL:234,DIM:222,ON:238,ERROR:133,TRACE:252,TIME:145,PAGE:144,PTR:143,LOMEM:146,HIMEM:147,ABS:148,ACS:149,ADVAL:150,ASC:151,ASN:152,ATN:153,BGET:154,COS:155,COUNT:156,DEG:157,ERL:158,ERR:159,EVAL:160,EXP:161,EXT:162,FALSE:163,GET:165,INKEY:166,INSTR:167,INT:168,LEN:169,LN:170,LOG:171,NOT:172,OPENIN:142,OPENOUT:174,OPENUP:173,PI:175,POINT:176,POS:177,RAD:178,RIGHT$:194,SGN:180,SIN:181,SQR:182,STR$:195,STRING$:196,TAN:183,TRUE:185,USR:186,VAL:187,VPOS:188,CHR$:189,GET$:190,INKEY$:191,LEFT$:192,MID$:193},i=[],r=0;for(;r<o.length;){let s=!1;for(let[e,m]of Object.entries(t))if(o.toUpperCase().substring(r,r+e.length)===e){let n=r===0?" ":o[r-1],a=r+e.length>=o.length?" ":o[r+e.length];if(/[^A-Za-z0-9_$%]/.test(n)&&/[^A-Za-z0-9_$%]/.test(a)){r>0&&o[r-1]===" "&&i.push(32),i.push(m),r+e.length<o.length&&o[r+e.length]===" "&&i.push(32),r+=e.length,s=!0;break}}s||(i.push(o.charCodeAt(r)),r++)}return new Uint8Array(i)}isBasicProgram(o){let t=new TextDecoder().decode(o),i=["PRINT","REM","MODE","COLOUR","GOTO","FOR","NEXT","IF","THEN","ELSE","END","STOP","RUN","NEW","LOAD","SAVE"],r=/^\d+\s/.test(t.trim()),s=i.some(e=>t.toUpperCase().includes(e));return r&&s}updateControlButtons(){let o=document.getElementById("dbg_reset"),t=document.getElementById("dbg_pause"),i=document.getElementById("dbg_go");o&&(o.style.display=this.resetSupported?"inline-block":"none",console.log("BBCMicroPlatform: Reset button visibility:",this.resetSupported?"visible":"hidden")),t&&(t.style.display=this.pauseResumeSupported?"inline-block":"none",console.log("BBCMicroPlatform: Pause button visibility:",this.pauseResumeSupported?"visible":"hidden")),i&&(i.style.display=this.pauseResumeSupported?"inline-block":"none",console.log("BBCMicroPlatform: Resume button visibility:",this.pauseResumeSupported?"visible":"hidden"))}};f.bbc=g;f["bbc-micro"]=g;f["bbc.b"]=g;f["bbc.model.b"]=g;export{g as BBCMicroPlatform};
//# sourceMappingURL=bbc-BCAWYWBR.js.map
