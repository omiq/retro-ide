{
  "version": 3,
  "sources": ["../src/platform/x86dosbox.ts"],
  "sourcesContent": ["import { Platform } from \"../common/baseplatform\";\nimport { PLATFORMS } from \"../common/emu\";\n\nclass X86DOSBoxPlatform implements Platform {\n    mainElement: HTMLElement;\n    private pauseResumeSupported = false;\n\n    constructor(mainElement: HTMLElement) {\n        this.mainElement = mainElement;\n        \n        // Listen for messages from the iframe\n        window.addEventListener('message', (event) => {\n            if (event.data && event.data.type === 'emulator_capabilities') {\n                console.log(\"X86DOSBoxPlatform: Received emulator capabilities:\", event.data.capabilities);\n                \n                if (event.data.capabilities && typeof event.data.capabilities.pauseResume === 'boolean') {\n                    this.pauseResumeSupported = event.data.capabilities.pauseResume;\n                    console.log(\"X86DOSBoxPlatform: Pause/resume supported:\", this.pauseResumeSupported);\n                    \n                    // Update the UI to show/hide pause/resume buttons\n                    this.updateControlButtons();\n                }\n            } else if (event.data && event.data.type === 'debug_objects') {\n                console.log(\"X86DOSBoxPlatform: Received debug message from iframe:\", event.data.message);\n                console.log(\"Note: Debug objects are available in the iframe context, not the main window\");\n            }\n        });\n    }\n\n    getName(): string {\n        return 'x86 (DOSBox)';\n    }\n\n    getDescription(): string {\n        return 'x86 DOSBox - Run C programs in a DOS environment with Turbo C';\n    }\n\n    async init(): Promise<void> {\n        console.log(\"X86DOSBoxPlatform init() called\");\n        // No special initialization needed\n    }\n\n    async start(): Promise<void> {\n        console.log(\"X86DOSBoxPlatform start() called - using iframe approach\");\n        \n        // Set up compilation listener immediately\n        this.setupCompilationListener();\n        \n        // Initially hide pause/resume buttons until we know if they're supported\n        this.pauseResumeSupported = false;\n        setTimeout(() => this.updateControlButtons(), 100);\n        \n        // Check if iframe already exists\n        let iframe = document.getElementById(\"x86dosbox-iframe\") as HTMLIFrameElement;\n        \n        if (!iframe) {\n            // Create iframe for DOSBox emulator\n            iframe = document.createElement('iframe');\n            iframe.id = 'x86dosbox-iframe';\n            iframe.style.width = '100%';\n            iframe.style.height = '600px';\n            iframe.style.border = '1px solid #ccc';\n            iframe.style.backgroundColor = '#000';\n            \n            // Add iframe to the main element\n            this.mainElement.innerHTML = '';\n            this.mainElement.appendChild(iframe);\n            console.log(\"X86DOSBoxPlatform: iframe created\");\n            \n            // Load the iframe content\n            iframe.src = 'x86dosbox-iframe.html';\n        } else {\n            console.log(\"X86DOSBoxPlatform: iframe already exists, reusing\");\n        }\n        \n        // Set up iframe with auto-compilation (async)\n        this.setupIframeWithAutoCompilation().catch(error => {\n            console.error(\"X86DOSBoxPlatform: Error in setupIframeWithAutoCompilation:\", error);\n        });\n    }\n\n    stop(): void {\n        console.log(\"X86DOSBoxPlatform stop() called\");\n        // Instead of sending a message, reload the iframe directly\n        const frame = document.getElementById(\"x86dosbox-iframe\") as HTMLIFrameElement;\n        if (frame) {\n            frame.src = frame.src; // Reload the iframe\n            console.log(\"X86DOSBoxPlatform: Reloaded iframe for stop/reset\");\n        }\n    }\n\n    reset(): void {\n        console.log(\"X86DOSBoxPlatform reset() called\");\n        // Instead of sending a message, reload the iframe directly\n        const frame = document.getElementById(\"x86dosbox-iframe\") as HTMLIFrameElement;\n        if (frame) {\n            frame.src = frame.src; // Reload the iframe\n            console.log(\"X86DOSBoxPlatform: Reloaded iframe for reset\");\n        }\n    }\n\n    pause(): void {\n        // Pause functionality disabled for now - not essential\n        console.log(\"X86DOSBoxPlatform: Pause functionality disabled\");\n    }\n\n    resume(): void {\n        // Resume functionality disabled for now - not essential\n        console.log(\"X86DOSBoxPlatform: Resume functionality disabled\");\n    }\n\n    isRunning(): boolean {\n        // For iframe-based emulators, we assume they're always running\n        return true;\n    }\n\n    getToolForFilename(filename: string): string {\n        // For DOSBox, we don't use traditional build tools - compilation happens in the emulator\n        const lowerFilename = filename.toLowerCase();\n        if (lowerFilename.endsWith('.c')) return 'none';\n        if (lowerFilename.endsWith('.bas')) return 'none';\n        if (lowerFilename.endsWith('.pas')) return 'none';\n        if (lowerFilename.endsWith('.asm')) return 'none';\n        return 'none';\n    }\n\n    getDefaultExtension(): string {\n        return '.c';\n    }\n\n    getPresets(): any[] {\n        return [\n            { id: 'hello.bas', name: 'Hello World (QBASIC)', category: 'QBASIC Tutorial' },\n            { id: 'graphics.bas', name: 'Graphics Demo (QBASIC)' },\n            { id: 'hellodos.c', name: 'Hello World (C)', category: 'TurboC Tutorial' },\n            { id: 'graphics.c', name: 'BGI Graphics Demo (C)' },\n            { id: 'ansitest.c', name: 'ANSI Escape Codes Test (C)' },\n            { id: 'cursors.c', name: 'Cursor Control Test (C)' },\n            { id: 'hello.pas', name: 'Hello World (Pascal)', category: 'Turbo Pascal Tutorial' },\n            { id: 'graphics.pas', name: 'Graphics Demo (Pascal)' },\n            { id: 'hello.asm', name: 'Hello World (NASM)', category: 'NASM Tutorial' },\n            { id: 'simple.asm', name: 'Simple Graphics (NASM)' },\n            { id: 'pattern.asm', name: 'Pattern Demo (NASM)' },\n            { id: 'graphics.asm', name: 'Advanced Graphics (NASM)' },\n        ];\n    }\n\n    loadROM(title: string, rom: any): void {\n        console.log(\"X86DOSBoxPlatform loadROM called with title:\", title, \"and\", rom.length, \"bytes\");\n        \n        const frame = document.getElementById(\"x86dosbox-iframe\") as HTMLIFrameElement;\n        if (frame && frame.contentWindow) {\n            // Check if this is a C or BASIC program\n            if (rom && rom.length > 0) {\n                console.log(\"X86DOSBoxPlatform: Program detected, sending via postMessage\");\n                \n                // Extract the actual filename from the title or get it from the current project\n                let filename = 'program.c';\n                if (title && (title.endsWith('.c') || title.endsWith('.bas') || title.endsWith('.pas') || title.endsWith('.asm'))) {\n                    filename = title;\n                } else {\n                    // Try to get the current main filename\n                    const currentFilename = (window as any).IDE?.getCurrentMainFilename?.();\n                    if (currentFilename && (currentFilename.endsWith('.c') || currentFilename.endsWith('.bas') || currentFilename.endsWith('.pas') || currentFilename.endsWith('.asm'))) {\n                        filename = currentFilename;\n                    } else {\n                        // Try to get filename from the project\n                        const project = (window as any).IDE?.getCurrentProject();\n                        const files = project?.getFiles() || {};\n                        const fileKeys = Object.keys(files);\n                        if (fileKeys.length > 0) {\n                            filename = fileKeys[0];\n                        }\n                    }\n                }\n                \n                console.log(\"X86DOSBoxPlatform: Using filename:\", filename);\n                \n                // Don't reload the iframe - just send the program data\n                frame.contentWindow.postMessage({\n                    type: 'compiled_program',\n                    program: rom,\n                    filename: filename,\n                    autoLoad: true\n                }, '*');\n            } else {\n                console.error(\"X86DOSBoxPlatform: No program data to load\");\n            }\n        } else {\n            console.error(\"X86DOSBoxPlatform: iframe not found or contentWindow not available\");\n        }\n    }\n\n    getMemoryMap() {\n        return {\n            main: [\n                { name: \"DOS Memory\", start: 0, size: 1048576, type: \"ram\" }\n            ]\n        };\n    }\n\n    getROMExtension(rom: Uint8Array): string {\n        return \".exe\";\n    }\n\n    private updateControlButtons(): void {\n        // Disable pause/resume functionality for now - not essential\n        const pauseButton = document.getElementById('dbg_pause') as HTMLElement;\n        const resumeButton = document.getElementById('dbg_go') as HTMLElement;\n        \n        if (pauseButton) {\n            pauseButton.style.display = 'none'; // Always hide pause button\n            console.log(\"X86DOSBoxPlatform: Pause button disabled\");\n        } else {\n            console.log(\"X86DOSBoxPlatform: Pause button not found\");\n        }\n        \n        if (resumeButton) {\n            resumeButton.style.display = 'none'; // Always hide resume button\n            console.log(\"X86DOSBoxPlatform: Resume button disabled\");\n        } else {\n            console.log(\"X86DOSBoxPlatform: Resume button not found\");\n        }\n    }\n\n    private async setupIframeWithAutoCompilation() {\n        console.log(\"X86DOSBoxPlatform: Setting up iframe with auto-compilation\");\n        \n        // Check if auto-compile is enabled\n        const autoCompileEnabled = (window as any).autoCompileEnabled === true;\n        console.log(\"X86DOSBoxPlatform: Auto-compile enabled:\", autoCompileEnabled);\n        \n        // Check if we have a compiled program\n        const output = (window as any).IDE?.getCurrentOutput();\n        if (output && output instanceof Uint8Array) {\n            console.log(\"X86DOSBoxPlatform: Found compiled program, loading iframe\");\n            this.loadROM(\"compiled_program\", output);\n        } else {\n            // For x86dosbox, we don't need to compile - we send source code directly to the emulator\n            console.log(\"X86DOSBoxPlatform: No compiled program found, sending source code directly to emulator\");\n            await this.sendSourceCodeToEmulator();\n        }\n    }\n\n    private async sendSourceCodeToEmulator() {\n        console.log(\"X86DOSBoxPlatform: Sending source code directly to emulator\");\n        \n        let retryCount = 0;\n        const maxRetries = 5;\n        \n        // Wait for the iframe to be ready\n        const waitForIframe = () => {\n            const frame = document.getElementById(\"x86dosbox-iframe\") as HTMLIFrameElement;\n            if (frame && frame.contentWindow) {\n                console.log(\"X86DOSBoxPlatform: Iframe ready, getting source code\");\n                \n                // Try to get the current file content from the IDE using the same approach as MSX platforms\n                const getCurrentProject = (window as any).IDE?.getCurrentProject;\n                const getCurrentMainFilename = (window as any).IDE?.getCurrentMainFilename;\n                \n                let mainFile: string;\n                let fileContent: any;\n                \n                if (getCurrentProject && getCurrentMainFilename) {\n                    const currentProject = getCurrentProject();\n                    const currentFile = getCurrentMainFilename();\n                    \n                    console.log(\"X86DOSBoxPlatform: Current file:\", currentFile);\n                    \n                    if (currentProject && currentFile) {\n                        const fileData = currentProject.getFile(currentFile);\n                        if (fileData) {\n                            mainFile = currentFile;\n                            fileContent = fileData;\n                            console.log(\"X86DOSBoxPlatform: Got content from project.getFile(), length:\", fileContent?.length);\n                        }\n                    }\n                }\n                \n                // If still no content, try to get it from the editor directly\n                if (!fileContent && (window as any).IDE?.getCurrentEditor) {\n                    const editor = (window as any).IDE.getCurrentEditor();\n                    if (editor && editor.getValue) {\n                        fileContent = editor.getValue();\n                        console.log(\"X86DOSBoxPlatform: Got content from editor, length:\", fileContent?.length);\n                    }\n                }\n                \n                if (!mainFile || !fileContent) {\n                    retryCount++;\n                    if (retryCount < maxRetries) {\n                        console.log(`X86DOSBoxPlatform: No source code to send, retrying in 1 second (attempt ${retryCount}/${maxRetries})`);\n                        setTimeout(waitForIframe, 1000);\n                        return;\n                    } else {\n                        console.log(\"X86DOSBoxPlatform: Max retries reached, giving up on auto-loading source code\");\n                        return;\n                    }\n                }\n                \n                // Convert content to string if needed\n                const sourceCode = typeof fileContent === 'string' ? fileContent : new TextDecoder().decode(fileContent as Uint8Array);\n                \n                console.log(\"X86DOSBoxPlatform: Sending source code to emulator for file:\", mainFile);\n                \n                // Send the source code directly to the emulator\n                frame.contentWindow.postMessage({\n                    type: 'compiled_program',\n                    program: new TextEncoder().encode(sourceCode),\n                    filename: mainFile,\n                    autoLoad: true\n                }, '*');\n            } else {\n                console.log(\"X86DOSBoxPlatform: Iframe not ready yet, retrying in 500ms\");\n                setTimeout(waitForIframe, 500);\n            }\n        };\n        \n        // Wait longer for the IDE to be fully initialized and file loaded\n        setTimeout(waitForIframe, 3000);\n    }\n\n    private setupCompilationListener() {\n        console.log(\"X86DOSBoxPlatform: Setting up compilation listener\");\n        \n        // Check if we've already set up the listener\n        if ((window as any).x86dosboxCompilationListenerSetup) {\n            console.log(\"X86DOSBoxPlatform: Compilation listener already set up, skipping\");\n            return;\n        }\n        \n        // Mark that we've set up the listener\n        (window as any).x86dosboxCompilationListenerSetup = true;\n        \n        // Hook into the global setCompileOutput function to detect successful compilations\n        const originalSetCompileOutput = (window as any).setCompileOutput;\n        (window as any).setCompileOutput = (output: any) => {\n            // Call the original function\n            if (originalSetCompileOutput) {\n                originalSetCompileOutput(output);\n            }\n            \n            // Check if auto-compile is enabled before processing output\n            const autoCompileEnabled = (window as any).autoCompileEnabled === true;\n            const isManualCompilation = (window as any).isManualCompilation === true;\n            \n            console.log(\"X86DOSBoxPlatform: Compilation output received - autoCompileEnabled:\", autoCompileEnabled, \"isManualCompilation:\", isManualCompilation);\n            console.log(\"X86DOSBoxPlatform: Raw autoCompileEnabled value:\", (window as any).autoCompileEnabled);\n            console.log(\"X86DOSBoxPlatform: Output type:\", typeof output, \"is Uint8Array:\", output instanceof Uint8Array);\n            \n            // Always load programs when they're compiled, regardless of autocompile setting\n            if (output && output instanceof Uint8Array) {\n                console.log(\"X86DOSBoxPlatform: Compilation completed, sending program to iframe\");\n                \n                // Wait a bit for the compilation output to be processed, then use loadROM\n                setTimeout(() => {\n                    this.loadROM(\"compiled_program\", output);\n                }, 1000);\n            }\n        };\n    }\n}\n\n// Register the platform\nPLATFORMS['x86dosbox'] = X86DOSBoxPlatform;\n\nexport default X86DOSBoxPlatform;\n"],
  "mappings": "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",
  "names": []
}
